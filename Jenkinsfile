// cm-docs/Jenkinsfile - ÌÜµÌï© Î©ÄÌã∞Î∏åÎûúÏπò ÌååÏù¥ÌîÑÎùºÏù∏
// Pseudo MSA ÏïÑÌÇ§ÌÖçÏ≤òÏóê ÎßûÏ∂ò Ïä§ÎßàÌä∏ Î∞∞Ìè¨ ÏãúÏä§ÌÖú
pipeline {
    agent any
    
    environment {
        // ÌÜµÌï© ÌôòÍ≤ΩÎ≥ÄÏàò Í¥ÄÎ¶¨
        CM_DOCS_ROOT = 'C:\\deploys\\cm-docs'
        WHEELHOUSE_PATH = 'C:\\deploys\\packages\\wheelhouse'
        BACKUP_ROOT = 'C:\\deploys\\backup'
        
        // ÌÖåÏä§Ìä∏ Ïù∏Ïä§ÌÑ¥Ïä§ ÌôòÍ≤Ω (Î∏åÎûúÏπòÎ≥Ñ)
        DEPLOY_ROOT = 'C:\\deploys\\tests'
        PY_PATH = '%LOCALAPPDATA%\\Programs\\Python\\Python312\\python.exe'
        NSSM_PATH = 'nssm'
        NGINX_PATH = 'C:\\nginx\\nginx.exe'
        NGINX_CONF_DIR = 'C:\\nginx\\conf\\conf.d'
        
        // ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú
        WEBSERVICE_PATH = "${CM_DOCS_ROOT}\\webservice"
        AUTODOC_PATH = "${CM_DOCS_ROOT}\\autodoc_service"
        CLI_PATH = "${CM_DOCS_ROOT}\\cli"
        
        // ÌôòÍ≤ΩÎ≥ÄÏàò Í∏∞Î∞ò Îç∞Ïù¥ÌÑ∞ Í≤ΩÎ°ú (ÌîÑÎ°úÎçïÏÖò)
        WEBSERVICE_DATA_PATH = 'C:\\deploys\\data\\webservice'
        AUTODOC_DATA_PATH = 'C:\\deploys\\data\\autodoc_service'
        
        // Î∞∞Ìè¨ Í≤ΩÎ°ú
        WEBSERVICE_DEPLOY_PATH = 'C:\\deploys\\apps\\webservice'
        AUTODOC_DEPLOY_PATH = 'C:\\deploys\\apps\\autodoc_service'
        NGINX_ROOT = 'C:\\nginx\\html'
        
        // Python Ïã§Ìñâ Í≤ΩÎ°ú
        WEBSERVICE_PYTHON = "${WEBSERVICE_DEPLOY_PATH}\\.venv\\Scripts\\python.exe"
        WEBSERVICE_PIP = "${WEBSERVICE_DEPLOY_PATH}\\.venv\\Scripts\\pip.exe"
        AUTODOC_PYTHON = "${AUTODOC_DEPLOY_PATH}\\.venv312\\Scripts\\python.exe"
        AUTODOC_PIP = "${AUTODOC_DEPLOY_PATH}\\.venv312\\Scripts\\pip.exe"
        
        // ÏÑúÎπÑÏä§ URL
        WEBSERVICE_BACKEND_URL = 'http://localhost:8000'
        WEBSERVICE_FRONTEND_URL = 'http://localhost'
        AUTODOC_SERVICE_URL = 'http://localhost:8001'
        
        // Ìó¨Ïä§Ï≤¥ÌÅ¨ URL
        WEBSERVICE_HEALTH_URL = 'http://localhost:8000/api/health'
        AUTODOC_HEALTH_URL = 'http://localhost:8001/health'
        
        // Î∞∞Ìè¨ ÏÉÅÌÉú Ï∂îÏ†Å
        DEPLOYMENT_STATUS = 'NONE'
        FAILED_SERVICES = ''
        CRITICAL_FAILURE = 'false'
        
        // Í∏∞ÌÉÄ ÏÑ§Ï†ï
        ANONYMIZED_TELEMETRY = 'False'
    }        
    
    stages {
        stage('ÏÜåÏä§ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ Î∞è Î≥ÄÍ≤Ω Í∞êÏßÄ') {
            steps {
                checkout scm
                script {
                    // Î≥ÄÍ≤ΩÎêú ÌååÏùº Î∂ÑÏÑù
                    def changedFiles = []
                    try {
                        changedFiles = bat(
                            script: 'git diff HEAD~1 HEAD --name-only',
                            returnStdout: true
                        ).split('\n').findAll { it.trim() }
                    } catch (Exception e) {
                        echo "Î≥ÄÍ≤Ω Í∞êÏßÄ Ïã§Ìå®, Ï†ÑÏ≤¥ ÎπåÎìú Ïã§Ìñâ: ${e.getMessage()}"
                        changedFiles = ['webservice/', 'autodoc_service/', 'cli/']
                    }
                    
                    // ÏÑúÎπÑÏä§Î≥Ñ Î≥ÄÍ≤Ω Í∞êÏßÄ
                    env.AUTODOC_CHANGED = changedFiles.any { it.contains('autodoc_service/') } ? 'true' : 'false'
                    env.WEBSERVICE_CHANGED = changedFiles.any { it.contains('webservice/') } ? 'true' : 'false'
                    env.CLI_CHANGED = changedFiles.any { it.contains('cli/') } ? 'true' : 'false'
                    env.ROOT_CHANGED = changedFiles.any { 
                        it.contains('Jenkinsfile') || it.contains('README.md') || it.contains('CLAUDE.md')
                    } ? 'true' : 'false'
                    
                    echo """
                    ===========================================
                    üìä Î≥ÄÍ≤Ω Í∞êÏßÄ Í≤∞Í≥º
                    ===========================================
                    ‚Ä¢ AutoDoc Service: ${env.AUTODOC_CHANGED}
                    ‚Ä¢ Webservice: ${env.WEBSERVICE_CHANGED}
                    ‚Ä¢ CLI: ${env.CLI_CHANGED}
                    ‚Ä¢ Root/Config: ${env.ROOT_CHANGED}
                    
                    Î≥ÄÍ≤ΩÎêú ÌååÏùºÎì§:
                    ${changedFiles.join('\n')}
                    ===========================================
                    """
                }
            }
        }
        
        stage('Branch Detect') {
            steps {
                script {
                    env.IS_TEST = (env.BRANCH_NAME.startsWith('feature/') || env.BRANCH_NAME.startsWith('hotfix/')) ? 'true' : 'false'
                    env.BID = sanitizeId(env.BRANCH_NAME)
                    env.BACK_PORT = pickPort(env.BRANCH_NAME, 8100, 200).toString()
                    env.AUTO_PORT = pickPort(env.BRANCH_NAME, 8500, 200).toString()

                    env.WEB_BACK_DST = "${env.DEPLOY_ROOT}\\${env.BID}\\webservice\\backend"
                    env.WEB_FRONT_DST = "${env.DEPLOY_ROOT}\\${env.BID}\\webservice\\frontend"
                    env.AUTO_DST = "${env.DEPLOY_ROOT}\\${env.BID}\\autodoc"
                    env.URL_PREFIX = "/tests/${env.BID}/"
                    
                    echo """
                    ===========================================
                    üîß Î∏åÎûúÏπò ÏÑ§Ï†ï
                    ===========================================
                    ‚Ä¢ Î∏åÎûúÏπò: ${env.BRANCH_NAME}
                    ‚Ä¢ ÌÖåÏä§Ìä∏ Ïù∏Ïä§ÌÑ¥Ïä§: ${env.IS_TEST}
                    ‚Ä¢ BID: ${env.BID}
                    ‚Ä¢ Backend Port: ${env.BACK_PORT}
                    ‚Ä¢ AutoDoc Port: ${env.AUTO_PORT}
                    ‚Ä¢ URL Prefix: ${env.URL_PREFIX}
                    ===========================================
                    """
                }
            }
        }
        
        stage('üöÄ 1Îã®Í≥Ñ: ÎèÖÎ¶Ω ÏÑúÎπÑÏä§ Î≥ëÎ†¨ ÎπåÎìú') {
            parallel {
                stage('üîß AutoDoc Service CI/CD') {
                    when {
                        expression { env.AUTODOC_CHANGED == 'true' || env.ROOT_CHANGED == 'true' }
                    }
                    steps {
                        script {
                            try {
                                echo "AutoDoc Service ÎπåÎìú/Î∞∞Ìè¨ ÏãúÏûë"
                                build job: 'autodoc_service-pipeline', 
                                      parameters: [string(name: 'BRANCH', value: env.BRANCH_NAME)]
                                
                                env.AUTODOC_DEPLOY_STATUS = 'SUCCESS'
                                echo "AutoDoc Service Î∞∞Ìè¨ ÏÑ±Í≥µ"
                                
                            } catch (Exception e) {
                                env.AUTODOC_DEPLOY_STATUS = 'FAILED'
                                env.FAILED_SERVICES += 'AutoDoc '
                                echo "AutoDoc Service Î∞∞Ìè¨ Ïã§Ìå®: ${e.getMessage()}"
                                // Non-Critical ÏÑúÎπÑÏä§Ïù¥ÎØÄÎ°ú Îã§Î•∏ ÏÑúÎπÑÏä§Îäî Í≥ÑÏÜç ÏßÑÌñâ
                            }
                        }
                    }
                }
                
                stage('üåê Webservice Backend CI/CD') {
                    when {
                        expression { env.WEBSERVICE_CHANGED == 'true' || env.ROOT_CHANGED == 'true' }
                    }
                    steps {
                        script {
                            try {
                                echo "Webservice Backend ÎπåÎìú/Î∞∞Ìè¨ ÏãúÏûë"
                                build job: 'webservice-backend-pipeline',
                                      parameters: [string(name: 'BRANCH', value: env.BRANCH_NAME)]
                                
                                env.WEBSERVICE_BACKEND_STATUS = 'SUCCESS'
                                echo "Webservice Backend Î∞∞Ìè¨ ÏÑ±Í≥µ"
                                
                            } catch (Exception e) {
                                env.WEBSERVICE_BACKEND_STATUS = 'FAILED'
                                env.FAILED_SERVICES += 'WebBackend '
                                env.CRITICAL_FAILURE = 'true'  // Critical ÏÑúÎπÑÏä§ Ïã§Ìå®
                                echo "Webservice Backend Î∞∞Ìè¨ Ïã§Ìå®: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('‚ö° CLI CI/CD') {
                    when {
                        expression { env.CLI_CHANGED == 'true' || env.ROOT_CHANGED == 'true' }
                    }
                    steps {
                        script {
                            try {
                                echo "CLI ÎπåÎìú/Ìå®ÌÇ§Ïßï ÏãúÏûë"
                                
                                dir("${WORKSPACE}/cli") {
                                    script {
                                        echo "CLI Python ÌôòÍ≤Ω Íµ¨Ï∂ï (Python 3.13 + wheelhouse)"
                                        
                                        // Í∏∞Ï°¥ Í∞ÄÏÉÅÌôòÍ≤Ω ÏôÑÏ†Ñ ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°ú ÏÉùÏÑ±
                                        bat 'if exist ".venv" rmdir /s /q ".venv"'
                                        bat '"%LOCALAPPDATA%\Programs\Python\Launcher\py.exe" -3.13 -m venv .venv'
                                        
                                        // Ìú†ÌïòÏö∞Ïä§ ÌôúÏö© Í≥†ÏÜç ÏÑ§Ïπò
                                        def wheelHouseExists = bat(
                                            script: "if exist \"${env.WHEELHOUSE_PATH}\\*.whl\" echo found",
                                            returnStdout: true
                                        ).contains('found')
                                        
                                        if (wheelHouseExists) {
                                            echo "Ìú†ÌïòÏö∞Ïä§ Î∞úÍ≤¨ - Ïò§ÌîÑÎùºÏù∏ Í≥†ÏÜç ÏÑ§Ïπò Î™®Îìú"
                                            bat "powershell -Command \"& '${WORKSPACE}\\cli\\.venv\\Scripts\\python.exe' -m pip install --upgrade pip\""
                                            bat "powershell -Command \"& '${WORKSPACE}\\cli\\.venv\\Scripts\\pip.exe' install --no-index --find-links=${env.WHEELHOUSE_PATH} -r requirements.txt\""
                                        } else {
                                            echo "Ìú†ÌïòÏö∞Ïä§ ÏóÜÏùå - Ïò®ÎùºÏù∏ ÏÑ§Ïπò"
                                            bat "powershell -Command \"& '${WORKSPACE}\\cli\\.venv\\Scripts\\python.exe' -m pip install --upgrade pip\""
                                            bat "powershell -Command \"& '${WORKSPACE}\\cli\\.venv\\Scripts\\pip.exe' install -r requirements.txt\""
                                        }
                                        
                                        echo "CLI ÌôòÍ≤Ω Íµ¨Ï∂ï ÏôÑÎ£å"
                                    }
                                    
                                    // CLI ÌÖåÏä§Ìä∏ Î∞è ÎπåÎìú Ïã§Ìñâ
                                    bat "powershell -Command \"& '${WORKSPACE}\\cli\\.venv\\Scripts\\python.exe' -m pytest --cov=ts_cli --cov-report=html\""
                                    bat "powershell -Command \"& '${WORKSPACE}\\cli\\.venv\\Scripts\\python.exe' scripts/build.py\""
                                }
                                
                                env.CLI_BUILD_STATUS = 'SUCCESS'
                                echo "CLI ÎπåÎìú ÏÑ±Í≥µ"
                                
                            } catch (Exception e) {
                                env.CLI_BUILD_STATUS = 'FAILED'
                                env.FAILED_SERVICES += 'CLI '
                                echo "CLI ÎπåÎìú Ïã§Ìå®: ${e.getMessage()}"
                                // Non-Critical ÏÑúÎπÑÏä§Ïù¥ÎØÄÎ°ú Îã§Î•∏ ÏÑúÎπÑÏä§Îäî Í≥ÑÏÜç ÏßÑÌñâ
                            }
                        }
                    }
                }
            }
        }
        
        stage('üé® 2Îã®Í≥Ñ: Webservice Frontend CI/CD') {
            when {
                allOf {
                    expression { env.WEBSERVICE_CHANGED == 'true' || env.ROOT_CHANGED == 'true' }
                    expression { env.CRITICAL_FAILURE == 'false' }  // Backend ÏÑ±Í≥µ ÏãúÏóêÎßå Ïã§Ìñâ
                }
            }
            steps {
                script {
                    try {
                        echo "Webservice Frontend ÎπåÎìú/Î∞∞Ìè¨ ÏãúÏûë (Backend ÏÑ±Í≥µ ÌôïÏù∏Îê®)"
                        build job: 'webservice-frontend-pipeline',
                              parameters: [string(name: 'BRANCH', value: env.BRANCH_NAME)]
                        
                        env.WEBSERVICE_FRONTEND_STATUS = 'SUCCESS'
                        echo "Webservice Frontend Î∞∞Ìè¨ ÏÑ±Í≥µ"
                        
                    } catch (Exception e) {
                        env.WEBSERVICE_FRONTEND_STATUS = 'FAILED'
                        env.FAILED_SERVICES += 'WebFrontend '
                        env.CRITICAL_FAILURE = 'true'  // Critical ÏÑúÎπÑÏä§ Ïã§Ìå®
                        echo "Webservice Frontend Î∞∞Ìè¨ Ïã§Ìå®: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('üîç 3Îã®Í≥Ñ: ÌÜµÌï© ÌÖåÏä§Ìä∏') {
            when {
                expression { 
                    (env.WEBSERVICE_CHANGED == 'true' || 
                     env.AUTODOC_CHANGED == 'true' || 
                     env.ROOT_CHANGED == 'true') &&
                    env.CRITICAL_FAILURE == 'false'  // Critical ÏÑúÎπÑÏä§ ÏÑ±Í≥µ ÏãúÏóêÎßå Ïã§Ìñâ
                }
            }
            parallel {
                stage('E2E ÌÖåÏä§Ìä∏') {
                    when {
                        allOf {
                            expression { env.WEBSERVICE_CHANGED == 'true' }
                            expression { env.WEBSERVICE_BACKEND_STATUS == 'SUCCESS' }
                            expression { env.WEBSERVICE_FRONTEND_STATUS == 'SUCCESS' }
                        }
                    }
                    steps {
                        script {
                            try {
                                echo "Webservice E2E ÌÖåÏä§Ìä∏ ÏãúÏûë (Backend + Frontend ÏÑ±Í≥µ ÌôïÏù∏Îê®)"
                                
                                // E2E ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï†Ñ ÏÑúÎπÑÏä§ Ï§ÄÎπÑ ÎåÄÍ∏∞
                                sleep(time: 30, unit: 'SECONDS')
                                
                                dir("${env.WEBSERVICE_PATH}\\frontend") {
                                    bat 'npm run test:e2e'
                                }
                                
                                env.E2E_TEST_STATUS = 'SUCCESS'
                                echo "E2E ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ"
                                
                            } catch (Exception e) {
                                env.E2E_TEST_STATUS = 'FAILED'
                                echo "E2E ÌÖåÏä§Ìä∏ Ïã§Ìå®: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('ÏÑúÎπÑÏä§ Í∞Ñ ÌÜµÏã† ÌÖåÏä§Ìä∏') {
                    steps {
                        script {
                            try {
                                echo "ÏÑúÎπÑÏä§ Í∞Ñ ÌÜµÏã† ÌÖåÏä§Ìä∏ ÏãúÏûë"
                                
                                // ÏÑúÎπÑÏä§ ÏïàÏ†ïÌôî ÎåÄÍ∏∞
                                sleep(time: 15, unit: 'SECONDS')
                                
                                // Í∞Å ÏÑúÎπÑÏä§ Ìó¨Ïä§Ï≤¥ÌÅ¨ (Í∞úÏÑ†Îêú ÌÖåÏä§Ìä∏)
                                def services = [:]
                                if (env.AUTODOC_DEPLOY_STATUS == 'SUCCESS') {
                                    services['AutoDoc'] = env.AUTODOC_HEALTH_URL
                                }
                                if (env.WEBSERVICE_BACKEND_STATUS == 'SUCCESS') {
                                    services['Backend'] = env.WEBSERVICE_HEALTH_URL
                                }
                                if (env.WEBSERVICE_FRONTEND_STATUS == 'SUCCESS') {
                                    services['Frontend'] = env.WEBSERVICE_FRONTEND_URL
                                }
                                
                                def allHealthy = true
                                def healthyCount = 0
                                def totalCount = services.size()
                                
                                services.each { name, url ->
                                    def servicePassed = false
                                    for (int i = 0; i < 3; i++) {
                                        try {
                                            def response = powershell(
                                                script: """
                                                    try {
                                                        \$result = Invoke-WebRequest -Uri '${url}' -UseBasicParsing -TimeoutSec 10
                                                        Write-Output \$result.StatusCode
                                                    } catch {
                                                        Write-Output "500"
                                                    }
                                                """,
                                                returnStdout: true
                                            ).trim()
                                            
                                            if (response == "200") {
                                                echo "${name} ÏÑúÎπÑÏä§ Ï†ïÏÉÅ (HTTP 200, ${i+1}Î≤àÏß∏ ÏãúÎèÑ)"
                                                servicePassed = true
                                                healthyCount++
                                                break
                                            } else {
                                                echo "${name} ÏÑúÎπÑÏä§ ÏùëÎãµ Ïù¥ÏÉÅ (HTTP ${response}, ${i+1}Î≤àÏß∏ ÏãúÎèÑ)"
                                            }
                                        } catch (Exception e) {
                                            echo "${name} ÏÑúÎπÑÏä§ Ï†ëÍ∑º Î∂àÍ∞Ä: ${e.getMessage()} (${i+1}Î≤àÏß∏ ÏãúÎèÑ)"
                                        }
                                        
                                        if (i < 2) sleep(time: 5, unit: 'SECONDS')
                                    }
                                    
                                    if (!servicePassed) {
                                        allHealthy = false
                                    }
                                }
                                
                                if (allHealthy && healthyCount == totalCount) {
                                    env.INTEGRATION_TEST_STATUS = 'SUCCESS'
                                    echo "Î™®Îì† Î∞∞Ìè¨Îêú ÏÑúÎπÑÏä§ Ï†ïÏÉÅ ÎèôÏûë ÌôïÏù∏ (${healthyCount}/${totalCount})"
                                } else if (healthyCount > 0) {
                                    env.INTEGRATION_TEST_STATUS = 'PARTIAL'
                                    echo "Î∂ÄÎ∂Ñ ÏÑ±Í≥µ: ${healthyCount}/${totalCount} ÏÑúÎπÑÏä§ Ï†ïÏÉÅ"
                                } else {
                                    env.INTEGRATION_TEST_STATUS = 'FAILED'
                                    echo "Î™®Îì† ÏÑúÎπÑÏä§ Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®"
                                }
                                
                            } catch (Exception e) {
                                env.INTEGRATION_TEST_STATUS = 'FAILED'
                                echo "ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìå®: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('üöÄ 4Îã®Í≥Ñ: Ïä§ÎßàÌä∏ Î∞∞Ìè¨ ÏôÑÎ£å') {
            steps {
                script {
                    // Î∞∞Ìè¨ ÏÉÅÌÉú Ï¢ÖÌï© Î∂ÑÏÑù
                    def successfulServices = []
                    def failedServices = []
                    def skippedServices = []
                    
                    // Í∞Å ÏÑúÎπÑÏä§ ÏÉÅÌÉú Î∂ÑÏÑù
                    if (env.AUTODOC_CHANGED == 'true') {
                        if (env.AUTODOC_DEPLOY_STATUS == 'SUCCESS') {
                            successfulServices.add('AutoDoc Service (Port 8001)')
                        } else {
                            failedServices.add('AutoDoc Service')
                        }
                    } else {
                        skippedServices.add('AutoDoc Service (Î≥ÄÍ≤Ω ÏóÜÏùå)')
                    }
                    
                    if (env.WEBSERVICE_CHANGED == 'true') {
                        if (env.WEBSERVICE_BACKEND_STATUS == 'SUCCESS') {
                            successfulServices.add('Webservice Backend (Port 8000)')
                        } else {
                            failedServices.add('Webservice Backend')
                        }
                        
                        if (env.WEBSERVICE_FRONTEND_STATUS == 'SUCCESS') {
                            successfulServices.add('Webservice Frontend (Port 80)')
                        } else if (env.WEBSERVICE_FRONTEND_STATUS == 'FAILED') {
                            failedServices.add('Webservice Frontend')
                        } else {
                            skippedServices.add('Webservice Frontend (Backend Ïã§Ìå®Î°ú Ïä§ÌÇµ)')
                        }
                    } else {
                        skippedServices.add('Webservice (Î≥ÄÍ≤Ω ÏóÜÏùå)')
                    }
                    
                    if (env.CLI_CHANGED == 'true') {
                        if (env.CLI_BUILD_STATUS == 'SUCCESS') {
                            successfulServices.add('CLI Build (Ïã§ÌñâÌååÏùº ÏÉùÏÑ±)')
                        } else {
                            failedServices.add('CLI Build')
                        }
                    } else {
                        skippedServices.add('CLI (Î≥ÄÍ≤Ω ÏóÜÏùå)')
                    }
                    
                    // ÏµúÏ¢Ö Î∞∞Ìè¨ ÏÉÅÌÉú Í≤∞Ï†ï
                    if (env.CRITICAL_FAILURE == 'true') {
                        env.DEPLOYMENT_STATUS = 'CRITICAL_FAILURE'
                        echo """
                        ‚ùå CRITICAL FAILURE - Webservice ÌïµÏã¨ ÏÑúÎπÑÏä§ Ïã§Ìå®
                        ===========================================
                        """
                    } else if (failedServices.size() > 0) {
                        env.DEPLOYMENT_STATUS = 'PARTIAL_SUCCESS'
                        echo """
                        ‚ö†Ô∏è PARTIAL SUCCESS - ÏùºÎ∂Ä ÏÑúÎπÑÏä§ Ïã§Ìå®
                        ===========================================
                        """
                    } else if (successfulServices.size() > 0) {
                        env.DEPLOYMENT_STATUS = 'SUCCESS'
                        echo """
                        ‚úÖ DEPLOYMENT SUCCESS
                        ===========================================
                        """
                    } else {
                        env.DEPLOYMENT_STATUS = 'NO_CHANGES'
                        echo """
                        ‚ÑπÔ∏è NO DEPLOYMENT NEEDED - Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå
                        ===========================================
                        """
                    }
                    
                    // ÏÉÅÏÑ∏ Í≤∞Í≥º Ï∂úÎ†•
                    if (successfulServices.size() > 0) {
                        echo "‚úÖ ÏÑ±Í≥µÌïú ÏÑúÎπÑÏä§:"
                        successfulServices.each { service ->
                            echo "  ‚Ä¢ ${service}"
                        }
                    }
                    
                    if (failedServices.size() > 0) {
                        echo "‚ùå Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§:"
                        failedServices.each { service ->
                            echo "  ‚Ä¢ ${service}"
                        }
                    }
                    
                    if (skippedServices.size() > 0) {
                        echo "‚è≠Ô∏è Ïä§ÌÇµÎêú ÏÑúÎπÑÏä§:"
                        skippedServices.each { service ->
                            echo "  ‚Ä¢ ${service}"
                        }
                    }
                    
                    // ÌÖåÏä§Ìä∏ Í≤∞Í≥º
                    echo ""
                    echo "üß™ ÌÖåÏä§Ìä∏ Í≤∞Í≥º:"
                    echo "  ‚Ä¢ ÌÜµÌï© ÌÖåÏä§Ìä∏: ${env.INTEGRATION_TEST_STATUS ?: 'SKIPPED'}"
                    echo "  ‚Ä¢ E2E ÌÖåÏä§Ìä∏: ${env.E2E_TEST_STATUS ?: 'SKIPPED'}"
                    
                    echo "==========================================="
                }
            }
        }
        
        stage('üß™ Deploy Test Instance') {
            when { 
                expression { env.IS_TEST == 'true' } 
            }
            steps {
                bat '''
                    chcp 65001
                    powershell -Command "[Console]::OutputEncoding = [System.Text.Encoding]::UTF8; $ErrorActionPreference = 'Stop'; ./scripts/deploy_test_env.ps1 `
                        -Bid "${env:BID}" `
                        -BackPort ${env:BACK_PORT} `
                        -AutoPort ${env:AUTO_PORT} `
                        -Py "${env:PY_PATH}" `
                        -Nssm "${env:NSSM_PATH}" `
                        -Nginx "${env:NGINX_PATH}" `
                        -NginxConfDir "${env:NGINX_CONF_DIR}" `
                        -WebSrc "$env:WORKSPACE\\webservice" `
                        -AutoSrc "$env:WORKSPACE\\autodoc_service" `
                        -WebBackDst "${env:WEB_BACK_DST}" `
                        -WebFrontDst "${env:WEB_FRONT_DST}" `
                        -AutoDst "${env:AUTO_DST}" `
                        -UrlPrefix \"${env:URL_PREFIX}\""
                '''
                echo "TEST URL: https://<YOUR-DOMAIN>${env.URL_PREFIX}"
            }
        }
        
        stage('üöÄ Deploy Develop') {
            when { 
                branch 'develop' 
            }
            steps {
                echo 'Deploying develop to the shared dev environment...'
                // Í∏∞Ï°¥ Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏/ÌïòÏúÑ Ïû° Ìò∏Ï∂ú Ïú†ÏßÄ
            }
        }
        
        stage('üîç Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏') {
            steps {
                script {
                    echo "ÏµúÏ¢Ö Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."
                    
                    // Î∞∞Ìè¨Îêú ÏÑúÎπÑÏä§Îì§Ïùò ÏµúÏ¢Ö ÏÉÅÌÉú Ï†êÍ≤Ä
                    def finalReport = []
                    
                    if (env.AUTODOC_CHANGED == 'true') {
                        def autodocStatus = env.AUTODOC_DEPLOY_STATUS ?: 'UNKNOWN'
                        finalReport.add("AutoDoc Service: ${autodocStatus}")
                    }
                    
                    if (env.WEBSERVICE_CHANGED == 'true') {
                        def backendStatus = env.WEBSERVICE_BACKEND_STATUS ?: 'UNKNOWN'
                        def frontendStatus = env.WEBSERVICE_FRONTEND_STATUS ?: 'UNKNOWN'
                        finalReport.add("Webservice Backend: ${backendStatus}")
                        finalReport.add("Webservice Frontend: ${frontendStatus}")
                    }
                    
                    if (env.CLI_CHANGED == 'true') {
                        def cliStatus = env.CLI_BUILD_STATUS ?: 'UNKNOWN'
                        finalReport.add("CLI Build: ${cliStatus}")
                    }
                    
                    echo """
                    ===========================================
                    üìä ÏµúÏ¢Ö Î∞∞Ìè¨ Î¶¨Ìè¨Ìä∏
                    ===========================================
                    ${finalReport.join('\n')}
                    
                    ÌÜµÌï© ÌÖåÏä§Ìä∏: ${env.INTEGRATION_TEST_STATUS ?: 'SKIPPED'}
                    E2E ÌÖåÏä§Ìä∏: ${env.E2E_TEST_STATUS ?: 'SKIPPED'}
                    
                    Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§: ${env.FAILED_SERVICES ?: 'NONE'}
                    ===========================================
                    """
                }
            }
        }
    }
    
    post {
        success {
            script {
                def successMessage = """
                üéâ CM-Docs ÌÜµÌï© Î∞∞Ìè¨ ÏÑ±Í≥µ!
                
                üìÖ ÎπåÎìú: ${BUILD_NUMBER}
                üåø Î∏åÎûúÏπò: ${env.BRANCH_NAME}
                ‚è∞ ÏãúÍ∞Ñ: ${new Date()}
                
                Î∞∞Ìè¨Îêú ÏÑúÎπÑÏä§:
                ${env.AUTODOC_CHANGED == 'true' ? '‚Ä¢ AutoDoc Service (Port 8001)' : ''}
                ${env.WEBSERVICE_CHANGED == 'true' ? '‚Ä¢ Webservice Backend (Port 8000)\n‚Ä¢ Webservice Frontend (Port 80)' : ''}
                ${env.CLI_CHANGED == 'true' ? '‚Ä¢ CLI Tools (ÎπåÎìú ÏôÑÎ£å)' : ''}
                """
                
                echo successMessage
                
                // Ïä¨Îûô ÏïåÎ¶º (ÏòµÏÖò)
                // slackSend channel: '#deployment', message: successMessage
            }
        }
        
        failure {
            script {
                def failureMessage = """
                ‚ùå CM-Docs ÌÜµÌï© Î∞∞Ìè¨ Ïã§Ìå®
                
                üìÖ ÎπåÎìú: ${BUILD_NUMBER}
                üåø Î∏åÎûúÏπò: ${env.BRANCH_NAME}
                ‚è∞ ÏãúÍ∞Ñ: ${new Date()}
                
                Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§: ${env.FAILED_SERVICES ?: 'UNKNOWN'}
                
                Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÏó¨ Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï¥Ï£ºÏÑ∏Ïöî.
                """
                
                echo failureMessage
                
                // Ïä¨Îûô ÏïåÎ¶º (ÏòµÏÖò)
                // slackSend channel: '#alerts', message: failureMessage, color: 'danger'
            }
        }
        
        always {
            script {
                // Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ Î™®ÎãàÌÑ∞ÎßÅ
                echo "=== ÎπåÎìú Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ Î¶¨Ìè¨Ìä∏ ==="
                try {
                    // Windows ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ ÌôïÏù∏
                    powershell """
                        Write-Host "Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ:"
                        Get-WmiObject -Class Win32_OperatingSystem | Select-Object @{Name="ÏÇ¨Ïö©Î•†(%)";Expression={[math]::Round(((\$_.TotalVisibleMemorySize - \$_.FreePhysicalMemory) / \$_.TotalVisibleMemorySize) * 100, 2)}}
                        
                        Write-Host "ÎîîÏä§ÌÅ¨ Í≥µÍ∞Ñ (C ÎìúÎùºÏù¥Î∏å):"
                        Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object @{Name="ÏÇ¨Ïö©Î•†(%)";Expression={[math]::Round(((\$_.Size - \$_.FreeSpace) / \$_.Size) * 100, 2)}}
                        
                        Write-Host "ÌôúÏÑ± Jenkins ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§:"
                        Get-ChildItem -Path "${WORKSPACE}" -Directory | Measure-Object | Select-Object Count
                    """
                } catch (Exception e) {
                    echo "Î¶¨ÏÜåÏä§ Î™®ÎãàÌÑ∞ÎßÅ Ïã§Ìå®: ${e.getMessage()}"
                }
                
                // Ìú†ÌïòÏö∞Ïä§ Ïû†Í∏à Ìï¥Ï†ú Î∞è Ï†ïÎ¶¨
                try {
                    powershell """
                        # Ìú†ÌïòÏö∞Ïä§ Ïû†Í∏à ÌååÏùº Ï†úÍ±∞
                        if (Test-Path "${env.WHEELHOUSE_PATH}\\.lock") {
                            Remove-Item "${env.WHEELHOUSE_PATH}\\.lock" -Force -ErrorAction SilentlyContinue
                            Write-Host "Ìú†ÌïòÏö∞Ïä§ Ïû†Í∏à Ìï¥Ï†ú ÏôÑÎ£å"
                        }
                        
                        # ÏûÑÏãú ÎπåÎìú ÌååÏùº Ï†ïÎ¶¨
                        Get-ChildItem -Path "${env.BACKUP_ROOT}" -Filter "*BUILD_${BUILD_NUMBER}*" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force
                        Write-Host "ÏûÑÏãú ÎπåÎìú ÌååÏùº Ï†ïÎ¶¨ ÏôÑÎ£å"
                    """
                } catch (Exception e) {
                    echo "Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨ Ïã§Ìå®: ${e.getMessage()}"
                }
                
                // ÏïÑÌã∞Ìå©Ìä∏ Î≥¥Í¥Ä (Ìñ•ÏÉÅÎêú Ìå®ÌÑ¥)
                try {
                    archiveArtifacts artifacts: '''
                        **/dist/*.whl,
                        **/dist/*.zip, 
                        **/dist/*.exe,
                        **/htmlcov/**,
                        **/coverage/**
                    ''', 
                    allowEmptyArchive: true, 
                    fingerprint: true,
                    onlyIfSuccessful: false
                    
                    echo "ÏïÑÌã∞Ìå©Ìä∏ Î≥¥Í¥Ä ÏôÑÎ£å (ÎπåÎìú ${BUILD_NUMBER})"
                } catch (Exception e) {
                    echo "ÏïÑÌã∞Ìå©Ìä∏ Î≥¥Í¥Ä Ïã§Ìå®: ${e.getMessage()}"
                }
            }
            
            // ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Ï†ïÎ¶¨ (ÌèêÏáÑÎßù ÌôòÍ≤Ω Í≥†Î†§)
            cleanWs(patterns: [
                [pattern: '**/node_modules', type: 'EXCLUDE'],  // ÌèêÏáÑÎßùÏóêÏÑú Ïû¨Îã§Ïö¥Î°úÎìú Ïñ¥Î†§ÏõÄ
                [pattern: '**/.venv*', type: 'EXCLUDE'],        // Python ÌôòÍ≤Ω Î≥¥Ï°¥
                [pattern: '**/wheelhouse', type: 'EXCLUDE'],    // Ìú†ÌïòÏö∞Ïä§ Î≥¥Ï°¥
                [pattern: '**/logs', type: 'EXCLUDE'],          // Î°úÍ∑∏ Î≥¥Ï°¥
                [pattern: '**/.pytest_cache', type: 'INCLUDE'], // ÏûÑÏãú Ï∫êÏãú ÏÇ≠Ï†ú
                [pattern: '**/temp*', type: 'INCLUDE'],         // ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú
                [pattern: '**/*.tmp', type: 'INCLUDE']          // ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú
            ])
            
            echo "ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Ï†ïÎ¶¨ ÏôÑÎ£å (ÌèêÏáÑÎßù ÌôòÍ≤Ω Í≥†Î†§)"
        }
    }
}

// Î∏åÎûúÏπòÎ≥Ñ ÌÖåÏä§Ìä∏ Ïù∏Ïä§ÌÑ¥Ïä§ Ïú†Ìã∏ Ìï®Ïàò
@NonCPS
def sanitizeId(String s) {
    return s.replaceAll('[^A-Za-z0-9-]', '-').toLowerCase()
}

@NonCPS
def pickPort(String b, int base, int span) {
    // Jenkins Î≥¥Ïïà Ï†ïÏ±ÖÏúºÎ°ú CRC32 ÏÇ¨Ïö© Î∂àÍ∞Ä, Í∞ÑÎã®Ìïú Ìï¥Ïãú ÎåÄÏ≤¥
    int hash = b.hashCode()
    if (hash < 0) hash = -hash  // ÏùåÏàò Ï≤òÎ¶¨
    return (int)(base + (hash % span))
}