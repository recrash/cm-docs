// cm-docs/Jenkinsfile - ÌÜµÌï© Î©ÄÌã∞Î∏åÎûúÏπò ÌååÏù¥ÌîÑÎùºÏù∏
// Pseudo MSA ÏïÑÌÇ§ÌÖçÏ≤òÏóê ÎßûÏ∂ò Ïä§ÎßàÌä∏ Î∞∞Ìè¨ ÏãúÏä§ÌÖú
pipeline {
    agent any
    
    environment {
        // ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú
        CM_DOCS_ROOT = 'C:\\Users\\recrash1325\\Documents\\deploys\\cm-docs'
        WEBSERVICE_PATH = "${CM_DOCS_ROOT}\\webservice"
        AUTODOC_PATH = "${CM_DOCS_ROOT}\\autodoc_service"
        
        // ÏÑúÎπÑÏä§ URL
        WEBSERVICE_BACKEND_URL = 'http://localhost:8000'
        WEBSERVICE_FRONTEND_URL = 'http://localhost'
        AUTODOC_SERVICE_URL = 'http://localhost:8001'
        
        // Î∞∞Ìè¨ ÏÉÅÌÉú Ï∂îÏ†Å
        DEPLOYMENT_STATUS = 'NONE'
        FAILED_SERVICES = ''
    }
    
    stages {
        stage('ÏÜåÏä§ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ Î∞è Î≥ÄÍ≤Ω Í∞êÏßÄ') {
            steps {
                checkout scm
                script {
                    // Î≥ÄÍ≤ΩÎêú ÌååÏùº Î∂ÑÏÑù
                    def changedFiles = []
                    try {
                        changedFiles = bat(
                            script: 'git diff HEAD~1 HEAD --name-only',
                            returnStdout: true
                        ).split('\n').findAll { it.trim() }
                    } catch (Exception e) {
                        echo "Î≥ÄÍ≤Ω Í∞êÏßÄ Ïã§Ìå®, Ï†ÑÏ≤¥ ÎπåÎìú Ïã§Ìñâ: ${e.getMessage()}"
                        changedFiles = ['webservice/', 'autodoc_service/', 'cli/']
                    }
                    
                    // ÏÑúÎπÑÏä§Î≥Ñ Î≥ÄÍ≤Ω Í∞êÏßÄ
                    env.AUTODOC_CHANGED = changedFiles.any { it.contains('autodoc_service/') } ? 'true' : 'false'
                    env.WEBSERVICE_CHANGED = changedFiles.any { it.contains('webservice/') } ? 'true' : 'false'
                    env.CLI_CHANGED = changedFiles.any { it.contains('cli/') } ? 'true' : 'false'
                    env.ROOT_CHANGED = changedFiles.any { 
                        it.contains('Jenkinsfile') || it.contains('README.md') || it.contains('CLAUDE.md')
                    } ? 'true' : 'false'
                    
                    echo """
                    ===========================================
                    üìä Î≥ÄÍ≤Ω Í∞êÏßÄ Í≤∞Í≥º
                    ===========================================
                    ‚Ä¢ AutoDoc Service: ${env.AUTODOC_CHANGED}
                    ‚Ä¢ Webservice: ${env.WEBSERVICE_CHANGED}
                    ‚Ä¢ CLI: ${env.CLI_CHANGED}
                    ‚Ä¢ Root/Config: ${env.ROOT_CHANGED}
                    
                    Î≥ÄÍ≤ΩÎêú ÌååÏùºÎì§:
                    ${changedFiles.join('\n')}
                    ===========================================
                    """
                }
            }
        }
        
        stage('üîß AutoDoc Service CI/CD') {
            when {
                expression { env.AUTODOC_CHANGED == 'true' || env.ROOT_CHANGED == 'true' }
            }
            steps {
                script {
                    try {
                        echo "AutoDoc Service ÎπåÎìú/Î∞∞Ìè¨ ÏãúÏûë"
                        build job: 'autodoc-service-pipeline', 
                              parameters: [string(name: 'BRANCH', value: env.BRANCH_NAME)]
                        
                        env.AUTODOC_DEPLOY_STATUS = 'SUCCESS'
                        echo "AutoDoc Service Î∞∞Ìè¨ ÏÑ±Í≥µ"
                        
                    } catch (Exception e) {
                        env.AUTODOC_DEPLOY_STATUS = 'FAILED'
                        env.FAILED_SERVICES += 'AutoDoc '
                        echo "AutoDoc Service Î∞∞Ìè¨ Ïã§Ìå®: ${e.getMessage()}"
                        // Ïã§Ìå®Ìï¥ÎèÑ Îã§Î•∏ ÏÑúÎπÑÏä§Îäî Í≥ÑÏÜç ÏßÑÌñâ
                    }
                }
            }
        }
        
        stage('üåê Webservice CI/CD') {
            when {
                expression { env.WEBSERVICE_CHANGED == 'true' || env.ROOT_CHANGED == 'true' }
            }
            parallel {
                stage('Backend ÎπåÎìú/Î∞∞Ìè¨') {
                    steps {
                        script {
                            try {
                                echo "Webservice Backend ÎπåÎìú/Î∞∞Ìè¨ ÏãúÏûë"
                                build job: 'webservice-backend-pipeline',
                                      parameters: [string(name: 'BRANCH', value: env.BRANCH_NAME)]
                                
                                env.WEBSERVICE_BACKEND_STATUS = 'SUCCESS'
                                echo "Webservice Backend Î∞∞Ìè¨ ÏÑ±Í≥µ"
                                
                            } catch (Exception e) {
                                env.WEBSERVICE_BACKEND_STATUS = 'FAILED'
                                env.FAILED_SERVICES += 'WebBackend '
                                echo "Webservice Backend Î∞∞Ìè¨ Ïã§Ìå®: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('Frontend ÎπåÎìú/Î∞∞Ìè¨') {
                    steps {
                        script {
                            try {
                                echo "Webservice Frontend ÎπåÎìú/Î∞∞Ìè¨ ÏãúÏûë"
                                build job: 'webservice-frontend-pipeline',
                                      parameters: [string(name: 'BRANCH', value: env.BRANCH_NAME)]
                                
                                env.WEBSERVICE_FRONTEND_STATUS = 'SUCCESS'
                                echo "Webservice Frontend Î∞∞Ìè¨ ÏÑ±Í≥µ"
                                
                            } catch (Exception e) {
                                env.WEBSERVICE_FRONTEND_STATUS = 'FAILED'
                                env.FAILED_SERVICES += 'WebFrontend '
                                echo "Webservice Frontend Î∞∞Ìè¨ Ïã§Ìå®: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('‚ö° CLI CI/CD') {
            when {
                expression { env.CLI_CHANGED == 'true' || env.ROOT_CHANGED == 'true' }
            }
            steps {
                script {
                    try {
                        echo "CLI ÎπåÎìú/Ìå®ÌÇ§Ïßï ÏãúÏûë"
                        
                        dir("${env.CM_DOCS_ROOT}\\cli") {
                            // CLIÎäî ÏÑúÎπÑÏä§ Î∞∞Ìè¨Í∞Ä ÏïÑÎãå ÎπåÎìúÎßå Ïã§Ìñâ
                            bat 'powershell -Command "& .\\.venv\\Scripts\\python.exe -m pytest --cov=ts_cli --cov-report=html"'
                            bat 'powershell -Command "& .\\.venv\\Scripts\\python.exe scripts/build.py"'
                        }
                        
                        env.CLI_BUILD_STATUS = 'SUCCESS'
                        echo "CLI ÎπåÎìú ÏÑ±Í≥µ"
                        
                    } catch (Exception e) {
                        env.CLI_BUILD_STATUS = 'FAILED'
                        env.FAILED_SERVICES += 'CLI '
                        echo "CLI ÎπåÎìú Ïã§Ìå®: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('üîç ÌÜµÌï© ÌÖåÏä§Ìä∏') {
            when {
                expression { 
                    env.WEBSERVICE_CHANGED == 'true' || 
                    env.AUTODOC_CHANGED == 'true' || 
                    env.ROOT_CHANGED == 'true' 
                }
            }
            parallel {
                stage('E2E ÌÖåÏä§Ìä∏') {
                    when {
                        expression { env.WEBSERVICE_CHANGED == 'true' }
                    }
                    steps {
                        script {
                            try {
                                echo "Webservice E2E ÌÖåÏä§Ìä∏ ÏãúÏûë"
                                
                                dir("${env.WEBSERVICE_PATH}\\frontend") {
                                    bat 'npm run test:e2e'
                                }
                                
                                env.E2E_TEST_STATUS = 'SUCCESS'
                                echo "E2E ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ"
                                
                            } catch (Exception e) {
                                env.E2E_TEST_STATUS = 'FAILED'
                                echo "E2E ÌÖåÏä§Ìä∏ Ïã§Ìå®: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('ÏÑúÎπÑÏä§ Í∞Ñ ÌÜµÏã† ÌÖåÏä§Ìä∏') {
                    steps {
                        script {
                            try {
                                echo "ÏÑúÎπÑÏä§ Í∞Ñ ÌÜµÏã† ÌÖåÏä§Ìä∏ ÏãúÏûë"
                                
                                // Í∞Å ÏÑúÎπÑÏä§ Ìó¨Ïä§Ï≤¥ÌÅ¨
                                def services = [
                                    'AutoDoc': env.AUTODOC_SERVICE_URL,
                                    'Backend': env.WEBSERVICE_BACKEND_URL,
                                    'Frontend': env.WEBSERVICE_FRONTEND_URL
                                ]
                                
                                def allHealthy = true
                                services.each { name, url ->
                                    try {
                                        def response = bat(
                                            script: "curl -s -o nul -w \"%{http_code}\" ${url}/health || curl -s -o nul -w \"%{http_code}\" ${url}",
                                            returnStdout: true
                                        ).trim()
                                        
                                        if (response == "200") {
                                            echo "${name} ÏÑúÎπÑÏä§ Ï†ïÏÉÅ (HTTP 200)"
                                        } else {
                                            echo "${name} ÏÑúÎπÑÏä§ Ïù¥ÏÉÅ (HTTP ${response})"
                                            allHealthy = false
                                        }
                                    } catch (Exception e) {
                                        echo "${name} ÏÑúÎπÑÏä§ Ï†ëÍ∑º Î∂àÍ∞Ä: ${e.getMessage()}"
                                        allHealthy = false
                                    }
                                }
                                
                                if (allHealthy) {
                                    env.INTEGRATION_TEST_STATUS = 'SUCCESS'
                                    echo "Î™®Îì† ÏÑúÎπÑÏä§ Ï†ïÏÉÅ ÎèôÏûë ÌôïÏù∏"
                                } else {
                                    env.INTEGRATION_TEST_STATUS = 'PARTIAL'
                                    echo "ÏùºÎ∂Ä ÏÑúÎπÑÏä§Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§"
                                }
                                
                            } catch (Exception e) {
                                env.INTEGRATION_TEST_STATUS = 'FAILED'
                                echo "ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìå®: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('üöÄ Ïä§ÎßàÌä∏ Î∞∞Ìè¨') {
            when {
                expression { 
                    env.FAILED_SERVICES == null || env.FAILED_SERVICES.trim() == ''
                }
            }
            steps {
                script {
                    echo """
                    ===========================================
                    üéØ Î∞∞Ìè¨ ÏôÑÎ£å ÏöîÏïΩ
                    ===========================================
                    """
                    
                    if (env.AUTODOC_CHANGED == 'true') {
                        echo "‚úÖ AutoDoc Service: Î∞∞Ìè¨ ÏôÑÎ£å (Port 8001)"
                    }
                    
                    if (env.WEBSERVICE_CHANGED == 'true') {
                        echo "‚úÖ Webservice Backend: Î∞∞Ìè¨ ÏôÑÎ£å (Port 8000)"
                        echo "‚úÖ Webservice Frontend: Î∞∞Ìè¨ ÏôÑÎ£å (Port 80)"
                    }
                    
                    if (env.CLI_CHANGED == 'true') {
                        echo "‚úÖ CLI: ÎπåÎìú ÏôÑÎ£å (dist/ÏóêÏÑú Ïã§ÌñâÌååÏùº ÌôïÏù∏ Í∞ÄÎä•)"
                    }
                    
                    env.DEPLOYMENT_STATUS = 'SUCCESS'
                    echo "===========================================\nÏä§ÎßàÌä∏ Î∞∞Ìè¨ ÏÑ±Í≥µ!"
                }
            }
        }
        
        stage('üîç Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏') {
            steps {
                script {
                    echo "ÏµúÏ¢Ö Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."
                    
                    // Î∞∞Ìè¨Îêú ÏÑúÎπÑÏä§Îì§Ïùò ÏµúÏ¢Ö ÏÉÅÌÉú Ï†êÍ≤Ä
                    def finalReport = []
                    
                    if (env.AUTODOC_CHANGED == 'true') {
                        def autodocStatus = env.AUTODOC_DEPLOY_STATUS ?: 'UNKNOWN'
                        finalReport.add("AutoDoc Service: ${autodocStatus}")
                    }
                    
                    if (env.WEBSERVICE_CHANGED == 'true') {
                        def backendStatus = env.WEBSERVICE_BACKEND_STATUS ?: 'UNKNOWN'
                        def frontendStatus = env.WEBSERVICE_FRONTEND_STATUS ?: 'UNKNOWN'
                        finalReport.add("Webservice Backend: ${backendStatus}")
                        finalReport.add("Webservice Frontend: ${frontendStatus}")
                    }
                    
                    if (env.CLI_CHANGED == 'true') {
                        def cliStatus = env.CLI_BUILD_STATUS ?: 'UNKNOWN'
                        finalReport.add("CLI Build: ${cliStatus}")
                    }
                    
                    echo """
                    ===========================================
                    üìä ÏµúÏ¢Ö Î∞∞Ìè¨ Î¶¨Ìè¨Ìä∏
                    ===========================================
                    ${finalReport.join('\n')}
                    
                    ÌÜµÌï© ÌÖåÏä§Ìä∏: ${env.INTEGRATION_TEST_STATUS ?: 'SKIPPED'}
                    E2E ÌÖåÏä§Ìä∏: ${env.E2E_TEST_STATUS ?: 'SKIPPED'}
                    
                    Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§: ${env.FAILED_SERVICES ?: 'NONE'}
                    ===========================================
                    """
                }
            }
        }
    }
    
    post {
        success {
            script {
                def successMessage = """
                üéâ CM-Docs ÌÜµÌï© Î∞∞Ìè¨ ÏÑ±Í≥µ!
                
                üìÖ ÎπåÎìú: ${BUILD_NUMBER}
                üåø Î∏åÎûúÏπò: ${env.BRANCH_NAME}
                ‚è∞ ÏãúÍ∞Ñ: ${new Date()}
                
                Î∞∞Ìè¨Îêú ÏÑúÎπÑÏä§:
                ${env.AUTODOC_CHANGED == 'true' ? '‚Ä¢ AutoDoc Service (Port 8001)' : ''}
                ${env.WEBSERVICE_CHANGED == 'true' ? '‚Ä¢ Webservice Backend (Port 8000)\n‚Ä¢ Webservice Frontend (Port 80)' : ''}
                ${env.CLI_CHANGED == 'true' ? '‚Ä¢ CLI Tools (ÎπåÎìú ÏôÑÎ£å)' : ''}
                """
                
                echo successMessage
                
                // Ïä¨Îûô ÏïåÎ¶º (ÏòµÏÖò)
                // slackSend channel: '#deployment', message: successMessage
            }
        }
        
        failure {
            script {
                def failureMessage = """
                ‚ùå CM-Docs ÌÜµÌï© Î∞∞Ìè¨ Ïã§Ìå®
                
                üìÖ ÎπåÎìú: ${BUILD_NUMBER}
                üåø Î∏åÎûúÏπò: ${env.BRANCH_NAME}
                ‚è∞ ÏãúÍ∞Ñ: ${new Date()}
                
                Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§: ${env.FAILED_SERVICES ?: 'UNKNOWN'}
                
                Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÏó¨ Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï¥Ï£ºÏÑ∏Ïöî.
                """
                
                echo failureMessage
                
                // Ïä¨Îûô ÏïåÎ¶º (ÏòµÏÖò)
                // slackSend channel: '#alerts', message: failureMessage, color: 'danger'
            }
        }
        
        always {
            // ÏïÑÌã∞Ìå©Ìä∏ Î≥¥Í¥Ä
            script {
                try {
                    archiveArtifacts artifacts: '**/dist/*.whl, **/dist/*.zip, **/dist/*.exe', 
                                   allowEmptyArchive: true, followSymlinks: false
                } catch (Exception e) {
                    echo "ÏïÑÌã∞Ìå©Ìä∏ Î≥¥Í¥Ä Ïã§Ìå®: ${e.getMessage()}"
                }
            }
            
            // ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Ï†ïÎ¶¨
            cleanWs(patterns: [
                [pattern: '**/node_modules', type: 'EXCLUDE'],
                [pattern: '**/.venv*', type: 'EXCLUDE'],
                [pattern: '**/logs', type: 'EXCLUDE']
            ])
        }
    }
}