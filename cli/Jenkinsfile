pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch name to build')
    }
    
    environment {
        WHEELHOUSE_PATH = "C:\\deploys\\packages\\wheelhouse"
        CLI_PATH = "${WORKSPACE}\\cli"
        PYTHONPATH = "${CLI_PATH}"
        PATH = "${env.PATH};${CLI_PATH}\\scripts"
        PYTHONIOENCODING = 'UTF-8'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    echo "소스코드 체크아웃 완료 - 브랜치: ${branchName}"
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                dir('cli') {
                    script {
                        echo "Setting up Python environment for CLI using PowerShell"
                        
                        powershell '''
                            [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                            
                            Write-Host "Creating Python virtual environment..."
                            if (Test-Path -Path .venv) { Remove-Item -Recurse -Force .venv }
                            & "${env:LOCALAPPDATA}\Programs\Python\Launcher\py.exe" -3.13 -m venv .venv
                            
                            Write-Host "Upgrading pip..."
                            & .\.venv\Scripts\python.exe -m pip install --upgrade pip
                        '''
                        
                        script {
                            def wheelHouseExists = bat(
                                script: "if exist \"${env.WHEELHOUSE_PATH}\\\*.whl\" echo found",
                                returnStdout: true
                            ).contains('found')
                            
                            if (wheelHouseExists) {
                                echo "Installing dependencies from Wheelhouse (Offline Mode)"
                                powershell '''
                                    [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                                    & .\.venv\Scripts\pip.exe install --no-index --find-links=\"${env.WHEELHOUSE_PATH}\" -r requirements-dev.txt
                                    & .\.venv\Scripts\pip.exe install --no-index --find-links=\"${env.WHEELHOUSE_PATH}\" .
                                '''
                            } else {
                                echo "Installing dependencies from PyPI (Online Mode)"
                                powershell '''
                                    [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                                    & .\.venv\Scripts\pip.exe install -r requirements-dev.txt
                                    & .\.venv\Scripts\pip.exe install .
                                '''
                            }
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('cli') {
                    script {
                        echo "Running CLI tests"
                        
                        powershell '''
                            [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                            $env:PYTHONPATH="${env.CLI_PATH}\src"

                            # 테스트 결과 디렉토리 생성
                            if (-not (Test-Path -Path test-results)) { New-Item -ItemType Directory -Path test-results }

                            # 테스트 실행 (실패해도 계속 진행)
                            try {
                                & .\.venv\Scripts\pytest.exe tests\unit\ -v --junit-xml=test-results\junit-unit.xml --cov=ts_cli --cov-report=html
                            } catch {
                                Write-Host "Unit tests completed with issues"
                            }
                            try {
                                & .\.venv\Scripts\pytest.exe tests\integration\ -v --junit-xml=test-results\junit-integration.xml
                            } catch {
                                Write-Host "Integration tests completed with issues"
                            }
                        '''
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('cli/test-results/junit-unit.xml')) {
                            junit 'cli/test-results/junit-unit.xml'
                        }
                        if (fileExists('cli/test-results/junit-integration.xml')) {
                            junit 'cli/test-results/junit-integration.xml'
                        }
                        if (fileExists('cli/htmlcov/index.html')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'cli/htmlcov',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Build Executable') {
            steps {
                dir('cli') {
                    script {
                        echo "Building executable with PyInstaller"
                        
                        powershell '''
                            [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
                            $env:PYTHONPATH="${env.CLI_PATH}\src"
                            & .\.venv\Scripts\python.exe scripts\build.py
                        '''
                        
                        bat """
                            chcp 65001 >NUL
                            if exist dist\\windows\\ts-cli.exe (
                                echo "Build successful: ts-cli.exe created"
                                dir dist\\windows\\ts-cli.exe
                            ) else (
                                echo "Build failed: ts-cli.exe not found"
                                exit 1
                            )
                        """
                    }
                }
            }
        }
        
        stage('Create Installer') {
            steps {
                dir('cli') {
                    script {
                        echo "Creating NSIS installer"
                        
                        bat """
                            chcp 65001 >NUL
                            makensis scripts\\setup_win.nsi
                        """
                        
                        bat """
                            chcp 65001 >NUL
                            if exist dist\\TestscenarioMaker-CLI-Setup.exe (
                                echo "Installer created successfully"
                                dir dist\\TestscenarioMaker-CLI-Setup.exe
                            ) else (
                                echo "Installer creation failed"
                                exit 1
                            )
                        """
                    }
                }
            }
        }
        
        stage('Rename and Archive') {
            steps {
                dir('cli') {
                    script {
                        echo "Renaming installer with branch name: ${params.BRANCH}"
                        
                        def branchSuffix = params.BRANCH.replaceAll('/', '-').replaceAll('\\', '-')
                        def originalName = "TestscenarioMaker-CLI-Setup.exe"
                        def newName = "TestscenarioMaker-CLI-Setup-${branchSuffix}.exe"
                        
                        bat """
                            chcp 65001 >NUL
                            cd dist
                            if exist \"${originalName}\" (
                                move /Y \"${originalName}\" \"${newName}\"
                                echo "Renamed to ${newName}"
                                dir "${newName}"
                            ) else (
                                echo "Original installer not found"
                                exit 1
                            )
                        """
                        
                        archiveArtifacts artifacts: "dist/${newName}", 
                                        fingerprint: true,
                                        allowEmptyArchive: false
                        
                        archiveArtifacts artifacts: "dist/windows/ts-cli.exe",
                                        fingerprint: true,
                                        allowEmptyArchive: false
                        
                        echo "Artifacts archived successfully"
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up workspace"
                    
                    bat """
                        chcp 65001 >NUL
                        cd cli
                        if exist build rmdir /S /Q build 2>nul || echo "No build directory to clean"
                        if exist ts_cli.egg-info rmdir /S /Q ts_cli.egg-info 2>nul || echo "No egg-info to clean"
                        if exist .pytest_cache rmdir /S /Q .pytest_cache 2>nul || echo "No pytest cache to clean"
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "✅ CLI build completed successfully for branch: ${params.BRANCH}"
            
            script {
                def branchSuffix = params.BRANCH.replaceAll('/', '-').replaceAll('\\', '-')
                def installerName = "TestscenarioMaker-CLI-Setup-${branchSuffix}.exe"
                
                echo "📦 Generated artifacts:"
                echo "  - Installer: ${installerName}"
                echo "  - Executable: ts-cli.exe"
                echo "  - Coverage report available in HTML format"
            }
        }
        
        failure {
            echo "❌ CLI build failed for branch: ${params.BRANCH}"
            
            script {
                echo "Build failure detected. Check logs for details."
            }
        }
        
        always {
            script {
                echo "Pipeline execution completed"
                
                if (fileExists('cli/test-results')) {
                    echo "📊 Test results collected"
                }
                if (fileExists('cli/htmlcov')) {
                    echo "📈 Coverage report generated"
                }
                
                bat """
                    chcp 65001 >NUL
                    cd cli
                    if exist dist\\windows\\ts-cli.exe echo "✓ Executable preserved"
                    if exist dist\\TestscenarioMaker-CLI-Setup-*.exe echo "✓ Installer preserved"
                """
            }
        }
    }
}