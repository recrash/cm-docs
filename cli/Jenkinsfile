pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch name to build')
        string(name: 'BASE_URL', defaultValue: 'https://cm-docs.cloud', description: 'API Base URL to bake into the executable')
    }
    
    environment {
        // Wheelhouse path for offline dependencies
        WHEELHOUSE_PATH = 'C:\\deploys\\packages\\wheelhouse'
        
        // Python paths - use relative paths where possible
        PYTHON_CMD = 'py -3.13'
        
        // UTF-8 encoding for all operations
        PYTHONIOENCODING = 'UTF-8'
        LANG = 'en_US.UTF-8'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // 현재 체크아웃된 브랜치 확인
                    def currentBranch = bat(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    
                    echo "소스코드 체크아웃 완료 - 현재 브랜치: ${currentBranch}"
                    
                    // 파라미터로 받은 브랜치와 비교
                    if (params.BRANCH) {
                        echo "요청된 브랜치: ${params.BRANCH}"
                        if (currentBranch != params.BRANCH && !currentBranch.endsWith("/${params.BRANCH}")) {
                            echo "경고: 요청된 브랜치와 현재 브랜치가 다를 수 있습니다"
                        }
                    }
                    
                    // Show current commit for verification
                    bat 'git log --oneline -1'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                dir('cli') {
                    script {
                        echo '빠른 테스트 환경 구축 (휠하우스 활용)'
                        
                        // Clean previous venv if exists
                        bat '''
                            if exist .venv (
                                echo Removing existing virtual environment
                                rmdir /S /Q .venv
                            )
                        '''
                        
                        // Python 3.13 가상환경 생성 (환경 격리)
                        echo "Python 환경 격리로 가상환경 생성 중..."
                        bat '''
                        (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo py %%*) > py_clean.bat
                        py_clean.bat -3.13 -m venv .venv
                        del py_clean.bat
                        '''
                        
                        // 휠하우스 활용 고속 설치
                        script {
                            def wheelHouseExists = fileExists(env.WHEELHOUSE_PATH)
                            
                            // pip 메모리 최적화 업그레이드 (메모리 오류 방지)
                            echo "pip 업그레이드 중 (메모리 최적화)..."

                            // 단순한 PowerShell 명령어로 변경 (구문 오류 방지)
                            bat '''
                            set PIP_NO_CACHE_DIR=1
                            set PIP_DISABLE_PIP_VERSION_CHECK=1
                            set PIP_NO_BUILD_ISOLATION=1

                            (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv\\Scripts\\python.exe" %%*) > python_clean.bat

                            if exist "C:\\deploys\\packages\\wheelhouse\\pip-*.whl" (
                                echo 휠하우스에서 pip 업그레이드 중...
                                python_clean.bat -m pip install --no-index --find-links="C:\\deploys\\packages\\wheelhouse" --upgrade pip --no-cache-dir
                            ) else (
                                echo 기본 pip 업그레이드 중...
                                python_clean.bat -m pip install --upgrade pip --no-cache-dir
                            )

                            del python_clean.bat

                            echo ✅ pip 업그레이드 완료
                            '''

                            if (wheelHouseExists) {
                                echo '휠하우스 발견 - 오프라인 고속 설치 모드 (폐쇄망 호환)'
                                bat '''
                                (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv\\Scripts\\pip.exe" %%*) > pip_clean.bat
                                pip_clean.bat install --no-index --find-links=C:\\deploys\\packages\\wheelhouse -r requirements-dev.txt
                                del pip_clean.bat
                                '''
                                bat '''
                                (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv\\Scripts\\pip.exe" %%*) > pip_clean.bat
                                pip_clean.bat install --no-index --find-links=C:\\deploys\\packages\\wheelhouse -e .
                                del pip_clean.bat
                                '''
                            } else {
                                echo '휠하우스 없음 - 온라인 설치'
                                bat '''
                                (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv\\Scripts\\pip.exe" %%*) > pip_clean.bat
                                pip_clean.bat install -r requirements-dev.txt
                                del pip_clean.bat
                                '''
                                bat '''
                                (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv\\Scripts\\pip.exe" %%*) > pip_clean.bat
                                pip_clean.bat install -e .
                                del pip_clean.bat
                                '''
                            }
                        }
                        
                        // 주요 패키지 검증 (시간 단축)
                        bat "powershell -Command \"\$env:PYTHONHOME=''; \$env:PYTHONPATH=''; \$env:PYTHONIOENCODING='utf-8'; & '.venv\\Scripts\\python.exe' -c \\\"import click; import rich; print('Test environment ready - CLI dependencies loaded')\\\"\""
                        
                        echo '테스트 환경 구축 완료 (최적화됨)'
                    }
                }
            }
        }
        
        
        stage('Run Tests') {
            steps {
                dir('cli') {
                    script {
                        echo 'Running unit and integration tests'
                        
                        // Create test-results directory
                        bat '''
                            if not exist test-results mkdir test-results
                        '''
                        
                        // Run pytest with coverage - 실패해도 계속 진행 (Python 환경 격리 적용)
                        bat(returnStatus: true, script: '''
                            (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=src" & echo ".venv\\Scripts\\pytest.exe" %%*) > pytest_clean.bat
                            pytest_clean.bat tests\\unit\\ -v ^
                                --junit-xml=test-results\\junit-unit.xml ^
                                --cov=ts_cli ^
                                --cov-report=html:htmlcov ^
                                --cov-report=term
                            del pytest_clean.bat
                        ''')
                        
                        // Run integration tests - 실패해도 계속 진행 (Python 환경 격리 적용)
                        bat(returnStatus: true, script: '''
                            (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=src" & echo ".venv\\Scripts\\pytest.exe" %%*) > pytest_clean.bat
                            pytest_clean.bat tests\\integration\\ -v ^
                                --junit-xml=test-results\\junit-integration.xml
                            del pytest_clean.bat
                        ''')
                    }
                }
            }
            post {
                always {
                    // Archive test results
                    junit 'cli/test-results/*.xml'
                    
                    // Publish coverage report
                    publishHTML([
                        allowMissing: true,  // 디렉토리가 없어도 실패하지 않도록
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'cli/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Executable') {
            steps {
                dir('cli') {
                    script {
                        echo 'Building executable with PyInstaller'
                        echo "API Base URL: ${params.BASE_URL}" // 받은 파라미터 확인
                        
                        // Run build script
                        script {
                            def baseUrl = params.BASE_URL ?: 'https://cm-docs.cloud'
                            bat "powershell -Command \"\$env:PYTHONHOME=''; \$env:PYTHONPATH='src'; \$env:PYTHONIOENCODING='utf-8'; & '.venv\\Scripts\\python.exe' scripts\\build.py --base-url '${baseUrl}'\""
                        }
                        
                        // Verify executable was created
                        script {
                            def exeExists = fileExists('dist/ts-cli.exe') || fileExists('dist/windows/ts-cli.exe')
                            if (!exeExists) {
                                error('Executable not created!')
                            }
                            echo 'Executable built successfully'
                        }
                    }
                }
            }
        }
        
        stage('Create Installer') {
            steps {
                dir('cli') {
                    script {
                        echo 'Creating NSIS installer'
                        
                        // Build installer with NSIS
                        bat '''
                            makensis scripts\\setup_win.nsi
                        '''
                        
                        // Move installer to dist directory
                        bat '''
                            if exist scripts\\TestscenarioMaker-CLI-Setup.exe (
                                if not exist dist mkdir dist
                                move /Y scripts\\TestscenarioMaker-CLI-Setup.exe dist\\
                            )
                        '''
                        
                        // Verify installer was created
                        script {
                            def installerExists = fileExists('dist/TestscenarioMaker-CLI-Setup.exe') || 
                                                 fileExists('scripts/TestscenarioMaker-CLI-Setup.exe')
                            if (!installerExists) {
                                error('Installer not created!')
                            }
                            echo 'Installer created successfully'
                        }
                    }
                }
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                dir('cli') {
                    script {
                        def branchSuffix = params.BRANCH.replaceAll('/', '-').replaceAll('\\\\', '-')
                        def installerName = "TestscenarioMaker-CLI-Setup-${branchSuffix}.exe"
                        
                        // Rename installer with branch suffix
                        bat """
                            cd dist
                            if exist TestscenarioMaker-CLI-Setup.exe (
                                move /Y TestscenarioMaker-CLI-Setup.exe "${installerName}"
                            )
                        """
                        
                        // Archive artifacts
                        archiveArtifacts artifacts: "dist/${installerName}", 
                                        fingerprint: true,
                                        allowEmptyArchive: false
                        
                        // Also archive the standalone executable
                        archiveArtifacts artifacts: 'dist/**/*.exe',
                                        fingerprint: true,
                                        allowEmptyArchive: true
                        
                        echo "Artifacts archived: ${installerName}"
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                dir('cli') {
                    script {
                        echo 'Cleaning up build artifacts'
                        
                        bat '''
                            if exist build rmdir /S /Q build
                            if exist ts_cli.egg-info rmdir /S /Q ts_cli.egg-info
                            if exist .pytest_cache rmdir /S /Q .pytest_cache
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "[SUCCESS] CLI build pipeline completed successfully"
            script {
                def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                echo "Build successful for branch: ${branchName}"
            }
        }
        
        failure {
            echo "[FAILED] CLI build pipeline failed"
            script {
                def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                echo "Build failed for branch: ${branchName}"
                echo "Check the logs for details"
            }
        }
        
        always {
            script {
                echo "Pipeline execution completed"
                
                // Clean workspace if requested
                if (params.CLEAN_WORKSPACE == 'true') {
                    cleanWs()
                }
            }
        }
    }
}