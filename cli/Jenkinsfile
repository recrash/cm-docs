pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch name to build')
    }
    
    environment {
        WHEELHOUSE_PATH = "C:\\deploys\\packages\\wheelhouse"
        CLI_PATH = "${WORKSPACE}\\cli"
        PYTHONPATH = "${CLI_PATH}\\src"
        PATH = "${env.PATH};${CLI_PATH}\\scripts"
        PYTHONIOENCODING = 'UTF-8'
        
        WORKSPACE_PYTHON_CMD = "${WORKSPACE}\\cli\\.venv\\Scripts\\python.exe"
        WORKSPACE_PIP_CMD = "${WORKSPACE}\\cli\\.venv\\Scripts\\pip.exe"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    echo "Source code checkout completed - Branch: ${branchName}"
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                dir('cli') {
                    script {
                        echo "Setting up Python environment with robust encoding control and output redirection"
                        
                        // Create virtual environment and upgrade pip
                        bat '''
                            powershell -NoProfile -Command "[Console]::OutputEncoding=[System.Text.Encoding]::UTF8; $env:PYTHONIOENCODING='utf-8'; Write-Host 'Creating Python virtual environment...'; if (Test-Path -Path .venv) { Remove-Item -Recurse -Force .venv }; py -3.13 -m venv .venv; Write-Host 'Upgrading pip...'; .venv\\Scripts\\python.exe -m pip install --upgrade pip > pip_upgrade.log 2>&1"
                        '''
                        
                        // Install dependencies (redirect output to bypass errors)
                        script {
                            def wheelHouseExists = bat(
                                script: "if exist \"${env.WHEELHOUSE_PATH}\\*.whl\" echo found",
                                returnStdout: true
                            ).contains('found')
                            
                            if (wheelHouseExists) {
                                echo "Installing dependencies from Wheelhouse (Offline Mode) with output redirection"
                                bat """
                                    powershell -NoProfile -Command "[Console]::OutputEncoding=[System.Text.Encoding]::UTF8; \$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PIP_CMD}' install --no-index --find-links='${env.WHEELHOUSE_PATH}' -r requirements-dev.txt > pip_install.log 2>&1; & '${env.WORKSPACE_PIP_CMD}' install --no-index --find-links='${env.WHEELHOUSE_PATH}' . >> pip_install.log 2>&1"
                                """
                            } else {
                                echo "Installing dependencies from PyPI (Online Mode) with output redirection"
                                bat """
                                    powershell -NoProfile -Command "[Console]::OutputEncoding=[System.Text.Encoding]::UTF8; \$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PIP_CMD}' install -r requirements-dev.txt > pip_install.log 2>&1; & '${env.WORKSPACE_PIP_CMD}' install . >> pip_install.log 2>&1"
                                """
                            }
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('cli') {
                    script {
                        echo "Running CLI tests with robust encoding control"
                        bat """
                            powershell -NoProfile -Command "[Console]::OutputEncoding=[System.Text.Encoding]::UTF8; \$env:PYTHONPATH='${env.PYTHONPATH}'; \$env:PYTHONIOENCODING='utf-8'; if (-not (Test-Path -Path test-results)) { New-Item -ItemType Directory -Path test-results }; try { & '${env.WORKSPACE_PYTHON_CMD}' -m pytest tests/unit/ -v --junit-xml=test-results/junit-unit.xml --cov=ts_cli --cov-report=html } catch { Write-Host 'Unit tests completed with issues' }; try { & '${env.WORKSPACE_PYTHON_CMD}' -m pytest tests/integration/ -v --junit-xml=test-results/junit-integration.xml } catch { Write-Host 'Integration tests completed with issues' }"
                        """
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('cli/test-results/junit-unit.xml')) {
                            junit 'cli/test-results/junit-unit.xml'
                        }
                        if (fileExists('cli/test-results/junit-integration.xml')) {
                            junit 'cli/test-results/junit-integration.xml'
                        }
                        if (fileExists('cli/htmlcov/index.html')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'cli/htmlcov',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Build Executable') {
            steps {
                dir('cli') {
                    script {
                        echo "Building executable with PyInstaller with robust encoding control"
                        bat """
                            rem Set console codepage to UTF-8 for the entire script block
                            chcp 65001 >NUL

                            rem Run the build script using PowerShell with explicit UTF-8 settings
                            powershell -NoProfile -Command "[Console]::OutputEncoding=[System.Text.Encoding]::UTF8; \$env:PYTHONPATH='${env.PYTHONPATH}'; \$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' scripts/build.py"

                            rem Verify the result in the same UTF-8 context
                            if exist dist\\ts-cli.exe (
                                echo \"Build successful: ts-cli.exe created\"
                                dir dist\\ts-cli.exe
                            ) else if exist dist\\windows\\ts-cli.exe (
                                echo \"Build successful: ts-cli.exe created in windows subfolder\"
                                dir dist\\windows\\ts-cli.exe
                            ) else (
                                echo \"Build failed: ts-cli.exe not found in dist or dist\\windows\"
                                exit 1
                            )
                        """
                    }
                }
            }
        }
        
        // ... remaining stages are the same ...
        stage('Create Installer') {
            steps {
                dir('cli') {
                    script {
                        echo "Creating NSIS installer"
                        
                        bat """
                            chcp 65001 >NUL
                            makensis scripts\\setup_win.nsi
                        """
                        
                        bat """
                            chcp 65001 >NUL
                            if exist dist\\TestscenarioMaker-CLI-Setup.exe (
                                echo \"Installer created successfully\"
                                dir dist\\TestscenarioMaker-CLI-Setup.exe
                            ) else (
                                echo \"Installer creation failed\"
                                exit 1
                            )
                        """
                    }
                }
            }
        }
        
        stage('Rename and Archive') {
            steps {
                dir('cli') {
                    script {
                        echo "Renaming installer with branch name: ${params.BRANCH}"
                        
                        def branchSuffix = params.BRANCH.replaceAll('/', '-').replaceAll('\\\\', '-')
                        def originalName = "TestscenarioMaker-CLI-Setup.exe"
                        def newName = "TestscenarioMaker-CLI-Setup-${branchSuffix}.exe"
                        
                        bat """
                            chcp 65001 >NUL
                            cd dist
                            if exist \"${originalName}\" (
                                move /Y \"${originalName}\" \"${newName}\" 
                                echo \"Renamed to ${newName}\"
                                dir \"${newName}\"
                            ) else (
                                echo \"Original installer not found\"
                                exit 1
                            )
                        """
                        
                        archiveArtifacts artifacts: "dist/${newName}", 
                                        fingerprint: true,
                                        allowEmptyArchive: false
                        
                        archiveArtifacts artifacts: "dist/ts-cli.exe, dist/windows/ts-cli.exe",
                                        fingerprint: true,
                                        allowEmptyArchive: true
                        
                        echo "Artifacts archived successfully"
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                dir('cli') {
                    script {
                        echo "Cleaning up workspace"
                        
                        bat """
                            chcp 65001 >NUL
                            cd cli
                            if exist build rmdir /S /Q build 2>nul || echo "No build directory to clean"
                            if exist ts_cli.egg-info rmdir /S /Q ts_cli.egg-info 2>nul || echo "No egg-info to clean"
                            if exist .pytest_cache rmdir /S /Q .pytest_cache 2>nul || echo "No pytest cache to clean"
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "[SUCCESS] CLI build completed successfully for branch: ${params.BRANCH}"
            
            script {
                def branchSuffix = params.BRANCH.replaceAll('/', '-').replaceAll('\\\\', '-')
                def installerName = "TestscenarioMaker-CLI-Setup-${branchSuffix}.exe"
                
                echo "[ARTIFACTS] Generated artifacts:"
                echo "  - Installer: ${installerName}"
                echo "  - Executable: ts-cli.exe"
                echo "  - Coverage report available in HTML format"
            }
        }
        
        failure {
            echo "[FAILED] CLI build failed for branch: ${params.BRANCH}"
            
            script {
                echo "Build failure detected. Check logs for details."
            }
        }
        
        always {
            script {
                echo "Pipeline execution completed"
                
                if (fileExists('cli/test-results')) {
                    echo "[INFO] Test results collected"
                }
                if (fileExists('cli/htmlcov')) {
                    echo "[INFO] Coverage report generated"
                }
                
                bat """
                    chcp 65001 >NUL
                    cd cli
                    if exist dist\\windows\\ts-cli.exe echo "[OK] Executable preserved"
                    if exist dist\\TestscenarioMaker-CLI-Setup-*.exe echo "[OK] Installer preserved"
                """
            }
        }
    }
}