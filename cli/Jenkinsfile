pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch name to build')
        string(name: 'BASE_URL', defaultValue: 'https://cm-docs.cloud', description: 'API Base URL to bake into the executable')
    }
    
    environment {
        // Wheelhouse path for offline dependencies
        WHEELHOUSE_PATH = 'C:\\deploys\\packages\\wheelhouse'
        
        // Python paths - use relative paths where possible
        PYTHON_CMD = 'py -3.13'
        
        // UTF-8 encoding for all operations
        PYTHONIOENCODING = 'UTF-8'
        LANG = 'en_US.UTF-8'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // 파라미터로 받은 브랜치를 명시적으로 체크아웃 (defaultValue가 있어도 명시적 체크아웃 필요)
                    echo "파라미터로 받은 브랜치로 체크아웃: ${params.BRANCH}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH}"]],
                        extensions: [],
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])
                    
                    // 현재 체크아웃된 브랜치 확인
                    def currentBranch = bat(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    
                    echo "체크아웃 완료 - 현재 브랜치: ${currentBranch}"
                    
                    // 검증
                    if (currentBranch != params.BRANCH && !currentBranch.endsWith("/${params.BRANCH}")) {
                        error("브랜치 체크아웃 실패! 요청: ${params.BRANCH}, 실제: ${currentBranch}")
                    }
                    
                    // Show current commit for verification
                    bat 'git log --oneline -1'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                dir('cli') {
                    script {
                        echo '빠른 테스트 환경 구축 (휠하우스 활용)'
                        
                        // Clean previous venv if exists
                        bat '''
                            if exist .venv (
                                echo Removing existing virtual environment
                                rmdir /S /Q .venv
                            )
                        '''
                        
                        // Python 3.13 가상환경 생성
                        bat '"%LOCALAPPDATA%\\Programs\\Python\\Launcher\\py.exe" -3.13 -m venv .venv'
                        
                        // 휠하우스 활용 고속 설치
                        script {
                            def wheelHouseExists = fileExists(env.WHEELHOUSE_PATH)
                            
                            if (wheelHouseExists) {
                                echo '휠하우스 발견 - 오프라인 고속 설치 모드 (폐쇄망 호환)'
                                bat '''
                                    .venv\\Scripts\\python.exe -m pip install --upgrade pip
                                '''
                                bat """
                                    .venv\\Scripts\\pip.exe install --no-index --find-links="${env.WHEELHOUSE_PATH}" -r requirements-dev.txt
                                    .venv\\Scripts\\pip.exe install --no-index --find-links="${env.WHEELHOUSE_PATH}" -e .
                                """
                            } else {
                                echo '휠하우스 없음 - 온라인 설치'
                                bat '''
                                    .venv\\Scripts\\python.exe -m pip install --upgrade pip
                                    .venv\\Scripts\\pip.exe install -r requirements-dev.txt
                                    .venv\\Scripts\\pip.exe install -e .
                                '''
                            }
                        }
                        
                        // 주요 패키지 검증 (시간 단축)
                        bat '''
                            .venv\\Scripts\\python.exe -c "import click; import rich; print('Test environment ready - CLI dependencies loaded')"
                        '''
                        
                        echo '테스트 환경 구축 완료 (최적화됨)'
                    }
                }
            }
        }
        
        
        stage('Run Tests') {
            steps {
                dir('cli') {
                    script {
                        echo 'Running unit and integration tests'
                        
                        // Create test-results directory
                        bat '''
                            if not exist test-results mkdir test-results
                        '''
                        
                        // Run pytest with coverage - 실패해도 계속 진행
                        bat(returnStatus: true, script: '''
                            set PYTHONPATH=src
                            .venv\\Scripts\\pytest.exe tests\\unit\\ -v ^
                                --junit-xml=test-results\\junit-unit.xml ^
                                --cov=ts_cli ^
                                --cov-report=html:htmlcov ^
                                --cov-report=term
                        ''')
                        
                        // Run integration tests - 실패해도 계속 진행
                        bat(returnStatus: true, script: '''
                            set PYTHONPATH=src
                            .venv\\Scripts\\pytest.exe tests\\integration\\ -v ^
                                --junit-xml=test-results\\junit-integration.xml
                        ''')
                    }
                }
            }
            post {
                always {
                    // Archive test results
                    junit 'cli/test-results/*.xml'
                    
                    // Publish coverage report
                    publishHTML([
                        allowMissing: true,  // 디렉토리가 없어도 실패하지 않도록
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'cli/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Executable') {
            steps {
                dir('cli') {
                    script {
                        echo 'Building executable with PyInstaller'
                        echo "API Base URL: ${params.BASE_URL}" // 받은 파라미터 확인
                        
                        // Run build script
                        bat '''
                            set PYTHONPATH=src
                            .venv\\Scripts\\python.exe scripts\\build.py --base-url "${params.BASE_URL}"
                        '''
                        
                        // Verify executable was created
                        script {
                            def exeExists = fileExists('dist/ts-cli.exe') || fileExists('dist/windows/ts-cli.exe')
                            if (!exeExists) {
                                error('Executable not created!')
                            }
                            echo 'Executable built successfully'
                        }
                    }
                }
            }
        }
        
        stage('Create Installer') {
            steps {
                dir('cli') {
                    script {
                        echo 'Creating NSIS installer'
                        
                        // Build installer with NSIS
                        bat '''
                            makensis scripts\\setup_win.nsi
                        '''
                        
                        // Move installer to dist directory
                        bat '''
                            if exist scripts\\TestscenarioMaker-CLI-Setup.exe (
                                if not exist dist mkdir dist
                                move /Y scripts\\TestscenarioMaker-CLI-Setup.exe dist\\
                            )
                        '''
                        
                        // Verify installer was created
                        script {
                            def installerExists = fileExists('dist/TestscenarioMaker-CLI-Setup.exe') || 
                                                 fileExists('scripts/TestscenarioMaker-CLI-Setup.exe')
                            if (!installerExists) {
                                error('Installer not created!')
                            }
                            echo 'Installer created successfully'
                        }
                    }
                }
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                dir('cli') {
                    script {
                        def branchSuffix = params.BRANCH.replaceAll('/', '-').replaceAll('\\\\', '-')
                        def installerName = "TestscenarioMaker-CLI-Setup-${branchSuffix}.exe"
                        
                        // Rename installer with branch suffix
                        bat """
                            cd dist
                            if exist TestscenarioMaker-CLI-Setup.exe (
                                move /Y TestscenarioMaker-CLI-Setup.exe "${installerName}"
                            )
                        """
                        
                        // Archive artifacts
                        archiveArtifacts artifacts: "dist/${installerName}", 
                                        fingerprint: true,
                                        allowEmptyArchive: false
                        
                        // Also archive the standalone executable
                        archiveArtifacts artifacts: 'dist/**/*.exe',
                                        fingerprint: true,
                                        allowEmptyArchive: true
                        
                        echo "Artifacts archived: ${installerName}"
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                dir('cli') {
                    script {
                        echo 'Cleaning up build artifacts'
                        
                        bat '''
                            if exist build rmdir /S /Q build
                            if exist ts_cli.egg-info rmdir /S /Q ts_cli.egg-info
                            if exist .pytest_cache rmdir /S /Q .pytest_cache
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "[SUCCESS] CLI build pipeline completed successfully"
            script {
                def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                echo "Build successful for branch: ${branchName}"
            }
        }
        
        failure {
            echo "[FAILED] CLI build pipeline failed"
            script {
                def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                echo "Build failed for branch: ${branchName}"
                echo "Check the logs for details"
            }
        }
        
        always {
            script {
                echo "Pipeline execution completed"
                
                // Clean workspace if requested
                if (params.CLEAN_WORKSPACE == 'true') {
                    cleanWs()
                }
            }
        }
    }
}