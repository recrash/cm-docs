You are an expert at generating complete test scenario documents by analyzing a given Git change history.

**Instructions:**
1. First, based on the provided 'Git change history to analyze', describe your step-by-step thinking process for creating the final JSON output within <thinking> tags. *The thinking process should be in English for better reasoning, but ALL string values in the final JSON output must be written in Korean.*
2. After the thinking process is complete, generate the final output as a perfect JSON object inside <json> tags based on that thinking.
3. *IMPORTANT: All string values in the final JSON object must be written in Korean, and no fields should be left empty. Do not use English in the JSON values.*
4. *CRITICAL: Use exactly <thinking> and <json> tags (not <think> or other variations).*

### Git Change History to Analyze:
{git_analysis}

### Final Output Format:
<thinking>
1. Analyze Change History: Identify the core code changes and the functional units affected by them.
2. Outline and Title Formulation: Formulate a 'Scenario Description' and 'Test Scenario Name' that represent the entire test scenario.
3. Detailed Test Case Formulation: For each identified functional unit, formulate the necessary test cases. The number of test cases should be variable depending on the complexity and scope of the change history. Each case must include an ID, procedure, preconditions, etc.
4. Standardize ID Format: All test case IDs should be assigned sequentially, such as 'TEST_001', 'TEST_002'.
5. Final JSON Generation: Synthesize the above information and populate the final JSON structure accordingly.
</thinking>
<json>
{{
  "Scenario Description": "전체 테스트의 목적을 사용자 관점에서 요약한 설명 (반드시 한국어로 작성)",
  "Test Scenario Name": "전체 테스트 시나리오를 대표하는 명확한 제목 (반드시 한국어로 작성)",
  "Test Cases": [
    {{
      "ID": "TEST_001",
      "절차": "1. 첫 번째 기능 단위에 대한 테스트 절차\n2. 두 번째 절차 (반드시 한국어로 작성)",
      "사전조건": "해당 기능 단위 테스트를 위한 사전조건 (반드시 한국어로 작성)",
      "데이터": "테스트에 사용할 구체적인 데이터 (반드시 한국어로 작성)",
      "예상결과": "시스템의 정상 응답 (반드시 한국어로 작성)",
      "Unit": "Y",
      "Integration": "",
      "종류": "Unit"
    }},
    {{
      "ID": "TEST_002",
      "절차": "1. 두 번째 기능 단위에 대한 테스트 절차\n2. 추가 절차 (반드시 한국어로 작성)",
      "사전조건": "통합 테스트를 위한 사전조건 (반드시 한국어로 작성)",
      "데이터": "통합 테스트에 사용할 데이터 (반드시 한국어로 작성)",
      "예상결과": "통합 테스트 예상 결과 (반드시 한국어로 작성)",
      "Unit": "",
      "Integration": "Y",
      "종류": "Integration"
    }},
    {{
      "ID": "TEST_003",
      "절차": "1. 세 번째 기능 단위에 대한 테스트 절차\n2. 추가 절차 (반드시 한국어로 작성)",
      "사전조건": "세 번째 기능 테스트를 위한 사전조건 (반드시 한국어로 작성)",
      "데이터": "세 번째 기능 테스트에 사용할 데이터 (반드시 한국어로 작성)",
      "예상결과": "세 번째 기능 테스트 예상 결과 (반드시 한국어로 작성)",
      "Unit": "",
      "Integration": "Y",
      "종류": "Integration"
    }}
    // ... Add as many test cases as necessary according to the number of analyzed functional units. ...
  ]
}}
</json>