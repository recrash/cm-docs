// webservice/Jenkinsfile.backend
pipeline {
    agent any
    environment {
        // Jenkins Workspace (빌드/테스트용)
        WORKSPACE_PYTHON_CMD = "${WORKSPACE}\\webservice\\.venv\\Scripts\\python.exe"
        WORKSPACE_PIP_CMD = "${WORKSPACE}\\webservice\\.venv\\Scripts\\pip.exe"
        
        // 배포 경로 (운영 서비스용)
        DEPLOY_PATH = 'C:\\deploys\\cm-docs\\webservice'
        DEPLOY_PYTHON_CMD = "${DEPLOY_PATH}\\.venv\\Scripts\\python.exe"
        DEPLOY_PIP_CMD = "${DEPLOY_PATH}\\.venv\\Scripts\\pip.exe"
        
        // 기타 설정
        HEALTH_CHECK_URL = 'http://localhost:8000/api/health'
        BACKUP_DIR = 'C:\\deploys\\backup\\webservice'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "소스코드 체크아웃 완료"
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    script {
                        echo "Jenkins Workspace에서 테스트 환경 구축"
                        
                        // 기존 venv 정리 후 Python 3.13 가상환경 재생성 (의존성 충돌 방지)
                        bat 'if exist ".venv" rmdir /s /q .venv'
                        bat '"%LOCALAPPDATA%\\Programs\\Python\\Launcher\\py.exe" -3.13 -m venv .venv'
                        
                        // Python 버전 확인
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' --version\""
                        
                        // 의존성 설치 (constraints 파일로 호환성 이슈 해결, prefer-binary로 최적화)
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pip install --upgrade pip\""
                        bat "powershell -Command \"& '${env.WORKSPACE_PIP_CMD}' install -r requirements.txt -c pip.constraints.txt --prefer-binary\""
                        
                        // 핵심 의존성 검증
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -c \\\"import fastapi; import sentence_transformers; print('Core dependencies verified successfully')\\\"\""
                        
                        // ChromaDB 설치 여부 확인
                        bat "powershell -Command \"& '${env.WORKSPACE_PIP_CMD}' show chromadb | findstr Name\""
                        
                        // Draft-03 메타스키마 로컬 레지스트리 검증 (오프라인 호환성 확인)
                        powershell """
                            try {
                                & '${env.WORKSPACE_PYTHON_CMD}' -c "
                                    from jsonschema.validators import Draft3Validator
                                    from jsonschema_specifications import REGISTRY
                                    print('Draft3 schema ID:', Draft3Validator.META_SCHEMA.get('\$id'))
                                    REGISTRY.contents('http://json-schema.org/draft-03/schema#')
                                    print('Draft-03 registry verification: OK')
                                "
                                Write-Host "메타스키마 로컬 레지스트리 검증 완료"
                            } catch {
                                Write-Host "메타스키마 검증 실패: \$_"
                                throw \$_
                            }
                        """
                        
                        echo "Jenkins Workspace 테스트 환경 구축 완료"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    // 전체 테스트 실행 (Windows 콘솔 인코딩 문제 해결)
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest tests/api/ -v -x --tb=short --disable-warnings\""
                    
                    // 특별히 중요한 테스트 개별 실행
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest tests/api/test_scenario_api.py -v\""
                    
                    echo "Webservice API 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    // PYTHONPATH 설정 및 통합 테스트 실행
                    bat "powershell -Command \"\\\$env:PYTHONPATH='\$(Get-Location);\\\$env:PYTHONPATH'; & '${env.WORKSPACE_PYTHON_CMD}' -c \\\"import src.config_loader; print('모듈 임포트 검증 완료')\\\"\""
                    
                    // 추가 통합 테스트가 있다면 여기서 실행
                    echo "통합 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Create Backup') {
            steps {
                script {
                    // 백업 디렉토리 생성
                    bat "if not exist \"${env.BACKUP_DIR}\" mkdir \"${env.BACKUP_DIR}\""
                    
                    // 타겟 폴더의 기존 wheel 파일들을 백업
                    powershell """
                        if (Test-Path "${env.DEPLOY_PATH}") {
                            \$existingWheels = Get-ChildItem -Path "${env.DEPLOY_PATH}" -Filter "*.whl" -ErrorAction SilentlyContinue
                            if (\$existingWheels.Count -gt 0) {
                                Write-Host "기존 wheel 파일 백업 중..."
                                foreach (\$wheel in \$existingWheels) {
                                    Copy-Item -Path \$wheel.FullName -Destination "${env.BACKUP_DIR}" -Force
                                    Write-Host "백업 완료: \$(\$wheel.Name)"
                                }
                            } else {
                                Write-Host "백업할 wheel 파일이 없습니다"
                            }
                        } else {
                            Write-Host "배포 경로가 존재하지 않습니다: ${env.DEPLOY_PATH}"
                            New-Item -Path "${env.DEPLOY_PATH}" -ItemType Directory -Force
                        }
                    """
                    echo "기존 wheel 파일 백업 완료"
                }
            }
        }
        
        stage('Build') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    // Jenkins Workspace에서 wheel 빌드
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m build\""
                    
                    // 빌드 결과 검증
                    script {
                        def whlExists = bat(
                            script: 'if exist "dist\\webservice-*.whl" echo found',
                            returnStdout: true
                        ).contains('found')
                        
                        if (!whlExists) {
                            error("빌드 실패: wheel 파일이 생성되지 않았습니다")
                        }
                    }
                    
                    echo "Wheel 빌드 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    try {
                        // 서비스 중지
                        bat 'nssm stop webservice'
                        echo "Webservice 중지 완료"
                        
                        // 10초 대기 (사용자 요구사항)
                        sleep(time: 10, unit: 'SECONDS')
                        
                        // 1단계: Jenkins Workspace에서 빌드된 wheel을 타겟 폴더로 복사
                        powershell """
                            \$latestWhl = Get-ChildItem -Path "${WORKSPACE}\\webservice\\dist\\webservice-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$latestWhl) {
                                Write-Host "새 wheel 파일 복사: \$(\$latestWhl.Name)"
                                Copy-Item -Path \$latestWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force
                                Write-Host "복사 완료: ${env.DEPLOY_PATH}\\\$(\$latestWhl.Name)"
                            } else {
                                throw "빌드된 wheel 파일을 찾을 수 없습니다"
                            }
                        """
                        
                        // 2단계: 타겟 폴더의 wheel 파일로 설치
                        powershell """
                            \$deployWhl = Get-ChildItem -Path "${env.DEPLOY_PATH}\\webservice-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$deployWhl) {
                                Write-Host "타겟 폴더에서 설치: \$(\$deployWhl.Name)"
                                & "${env.DEPLOY_PIP_CMD}" install \$deployWhl.FullName --force-reinstall
                                Write-Host "설치 완료"
                            } else {
                                throw "타겟 폴더에 wheel 파일이 없습니다"
                            }
                        """
                        
                        // 서비스 시작
                        bat 'nssm start webservice'
                        echo "Webservice 시작 완료"
                        
                    } catch (Exception e) {
                        echo "배포 실패: ${e.getMessage()}"
                        // 백업에서 롤백 시도
                        bat 'nssm stop webservice'
                        powershell """
                            if (Test-Path "${env.BACKUP_DIR}\\*.whl") {
                                \$backupWhl = Get-ChildItem -Path "${env.BACKUP_DIR}\\*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                Write-Host "백업에서 롤백 실행: \$(\$backupWhl.Name)"
                                # 백업을 타겟 폴더로 복사
                                Copy-Item -Path \$backupWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force
                                # 타겟 폴더에서 설치
                                & "${env.DEPLOY_PIP_CMD}" install "${env.DEPLOY_PATH}\\\$(\$backupWhl.Name)" --force-reinstall
                            }
                        """
                        bat 'nssm start webservice'
                        throw e
                    }
                }
            }
        }
        
        stage('API Health Check') {
            steps {
                script {
                    // 서비스 시작 대기
                    sleep(time: 15, unit: 'SECONDS')
                    
                    def endpoints = [
                        "${env.HEALTH_CHECK_URL}": "기본 헬스체크",
                        "http://localhost:8000/": "루트 엔드포인트",
                        "http://localhost:8000/api/v2": "V2 API 엔드포인트"
                    ]
                    
                    def allPassed = true
                    
                    endpoints.each { url, description ->
                        def endpointPassed = false
                        
                        for (int i = 0; i < 3; i++) {
                            try {
                                def response = powershell(
                                    script: """
                                        try {
                                            \$result = Invoke-WebRequest -Uri '${url}' -UseBasicParsing -TimeoutSec 10
                                            Write-Output \$result.StatusCode
                                        } catch {
                                            Write-Output "500"
                                        }
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                if (response == "200") {
                                    endpointPassed = true
                                    echo "${description} 검증 성공 (${i+1}번째 시도)"
                                    break
                                } else {
                                    echo "${description} 실패 - HTTP ${response} (${i+1}번째 시도)"
                                }
                            } catch (Exception e) {
                                echo "${description} 오류: ${e.getMessage()} (${i+1}번째 시도)"
                            }
                            
                            if (i < 2) sleep(time: 5, unit: 'SECONDS')
                        }
                        
                        if (!endpointPassed) {
                            echo "경고: ${description} 검증 실패"
                            allPassed = false
                        }
                    }
                    
                    if (!allPassed) {
                        echo "일부 API 엔드포인트 검증 실패 - 수동 확인이 필요합니다"
                    } else {
                        echo "모든 API 엔드포인트 검증 완료"
                    }
                }
            }
        }
        
        stage('Download Wheels for Offline') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    script {
                        echo "폐쇄망 환경 대비 휠 번들 다운로드"
                        
                        // 휠 다운로드 디렉토리 생성
                        bat 'if not exist ".pip-wheelhouse" mkdir ".pip-wheelhouse"'
                        
                        // 모든 의존성 휠 다운로드 (폐쇄망 대비)
                        bat "powershell -Command \"& '${env.WORKSPACE_PIP_CMD}' download -r requirements.txt -c pip.constraints.txt -d .pip-wheelhouse --prefer-binary\""
                        
                        // 다운로드된 휠 목록 확인
                        bat 'dir /b ".pip-wheelhouse\\*.whl" | find /c ".whl"'
                        
                        echo "오프라인 설치용 휠 번들 준비 완료"
                    }
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                // 빌드된 휠과 다운로드된 휠 번들 모두 보관
                archiveArtifacts artifacts: "webservice/dist/*.whl, webservice/.pip-wheelhouse/*.whl", followSymlinks: false
                echo "Jenkins Workspace에서 빌드된 Wheel 아티팩트 및 의존성 휠 번들 보관 완료"
            }
        }
    }
    
    post {
        success {
            echo "Webservice Backend 배포 성공"
        }
        failure {
            echo "Webservice Backend 배포 실패 - 로그를 확인하세요"
        }
        always {
            // Jenkins Workspace 정리
            dir("${WORKSPACE}/webservice") {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                // 테스트로 생성된 파일 정리
                bat 'if exist "outputs\\*TEST_*" del /f /q "outputs\\*TEST_*"'
                // pytest 캐시 정리
                bat 'if exist ".pytest_cache" rmdir /s /q ".pytest_cache"'
                // 임시 파일 강제 정리
                bat 'for /f "tokens=*" %%i in (\'dir /s /b *.xlsx *.json 2^>nul\') do del /f /q "%%i" 2>nul || echo "Skipping locked file: %%i"'
            }
            
            // 배포 환경 정리
            dir(env.DEPLOY_PATH) {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                bat 'if exist "outputs\\*TEST_*" del /f /q "outputs\\*TEST_*"'
            }
        }
    }
}