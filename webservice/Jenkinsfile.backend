// webservice/Jenkinsfile.backend
pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch name')
    }

    environment {
        // Jenkins Workspace (빌드/테스트용)
        // 테스트용 주석입니다.
        WORKSPACE_PYTHON_CMD = "${WORKSPACE}\\webservice\\.venv\\Scripts\\python.exe"
        WORKSPACE_PIP_CMD = "${WORKSPACE}\\webservice\\.venv\\Scripts\\pip.exe"
        
        // 배포 경로 (운영 서비스용) - 새 폴더 구조 반영
        DEPLOY_PATH = 'C:\\deploys\\apps\\webservice'
        DEPLOY_PYTHON_CMD = "${DEPLOY_PATH}\\.venv\\Scripts\\python.exe"
        DEPLOY_PIP_CMD = "${DEPLOY_PATH}\\.venv\\Scripts\\pip.exe"
        
        // 공유 캐시 폴더
        WHEELHOUSE_PATH = 'C:\\deploys\\packages\\wheelhouse'

        // 환경변수 기반 데이터 경로 (커밋 f57efef)
        WEBSERVICE_DATA_PATH = 'C:\\deploys\\data\\webservice'
        // RAG(ChromaDB)의 불필요한 네트워크 통신을 막기 위해 이 부분을 추가
        ANONYMIZED_TELEMETRY = 'False'
        
        
        // 기타 설정
        HEALTH_CHECK_URL = 'http://localhost:8000/api/webservice/health'  // root_path 반영
        BACKUP_DIR = 'C:\\deploys\\backup\\apps\\webservice'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // 현재 체크아웃된 브랜치 확인
                    def currentBranch = bat(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    
                    echo "소스코드 체크아웃 완료 - 현재 브랜치: ${currentBranch}"
                    
                    // 파라미터로 받은 브랜치와 비교
                    if (params.BRANCH) {
                        echo "요청된 브랜치: ${params.BRANCH}"
                        if (currentBranch != params.BRANCH && !currentBranch.endsWith("/${params.BRANCH}")) {
                            echo "경고: 요청된 브랜치와 현재 브랜치가 다를 수 있습니다"
                        }
                    }
                }
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    script {
                        echo "빠른 테스트 환경 구축 (휠하우스 활용)"
                        
                        // Python 3.12 가상환경 생성
                        bat '"%LOCALAPPDATA%\\Programs\\Python\\Launcher\\py.exe" -3.12 -m venv .venv'
                        
                        // 휠하우스 활용 고속 설치
                        script {
                            def wheelHouseExists = bat(
                                script: 'if exist "${env.WHEELHOUSE_PATH}\\*.whl" echo found',
                                returnStdout: true
                            ).contains('found')
                            
                            if (wheelHouseExists) {
                                echo "휠하우스 발견 - 오프라인 고속 설치 모드 (폐쇄망 호환)"
                                bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pip install --upgrade pip\""
                                bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PIP_CMD}' install --no-index --find-links=${env.WHEELHOUSE_PATH} -r requirements.txt -c pip.constraints.txt\""
                            } else {
                                echo "휠하우스 없음 - 온라인 설치 (PyTorch CUDA 포함)"
                                bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pip install --upgrade pip\""
                                bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PIP_CMD}' install --extra-index-url https://download.pytorch.org/whl/cu121 -r requirements.txt -c pip.constraints.txt --prefer-binary\""
                            }
                        }
                        
                        // CUDA 및 주요 패키지 검증 (시간 단축)
                        bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -c \\\"import fastapi; import torch; print(f'Test environment ready - PyTorch {torch.__version__} CUDA: {torch.cuda.is_available()}')\\\"\""
                        
                        echo "테스트 환경 구축 완료 (최적화됨)"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    // CMDOCS_CONFIG 환경변수로 CI 전용 config 사용
                    script {
                        env.CMDOCS_CONFIG = "${WORKSPACE}\\webservice\\config.ci.json"
                        echo "Jenkins CI Config 설정: ${env.CMDOCS_CONFIG}"
                    }
                    
                    // 전체 테스트 실행 (Windows 콘솔 인코딩 문제 해결 + CI config)
                    bat "powershell -NoProfile -Command \"\$env:CMDOCS_CONFIG='${env.CMDOCS_CONFIG}'; \$env:PYTHONPATH = (Get-Location).Path + ';' + \$env:PYTHONPATH; \$env:PYTHONIOENCODING='utf-8'; [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest tests/api/ -v -x --tb=short --disable-warnings\""
                    
                    // 특별히 중요한 테스트 개별 실행
                    bat "powershell -NoProfile -Command \"\$env:CMDOCS_CONFIG='${env.CMDOCS_CONFIG}'; \$env:PYTHONPATH = (Get-Location).Path + ';' + \$env:PYTHONPATH; \$env:PYTHONIOENCODING='utf-8'; [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest tests/api/test_scenario_api.py -v\""
                    
                    // V2 API 시나리오 테스트 (config 통합 로딩 검증)
                    bat "powershell -NoProfile -Command \"\$env:CMDOCS_CONFIG='${env.CMDOCS_CONFIG}'; \$env:PYTHONPATH = (Get-Location).Path + ';' + \$env:PYTHONPATH; \$env:PYTHONIOENCODING='utf-8'; [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest tests/api/v2/test_scenario_v2.py -v\""
                    
                    echo "Webservice API 테스트 완료 (Jenkins CI Config)"
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    // PYTHONPATH 및 CMDOCS_CONFIG 설정 후 통합 테스트 실행
                    bat "powershell -NoProfile -Command \"\$env:CMDOCS_CONFIG='${env.CMDOCS_CONFIG}'; \$env:PYTHONPATH = (Get-Location).Path + ';' + \$env:PYTHONPATH; \$env:PYTHONIOENCODING='utf-8'; [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8; & '${env.WORKSPACE_PYTHON_CMD}' -c \\\"from app.core.config_loader import load_config; config = load_config(); print('Config loaded:', config is not None)\\\"\""
                    
                    // 모듈 임포트 및 config 로딩 성공 확인
                    echo "통합 테스트 완료 - config_loader 임포트 및 CI config 로딩 성공"
                }
            }
        }
        
        stage('Create Backup') {
            steps {
                script {
                    // 백업 디렉토리 생성
                    bat "if not exist \"${env.BACKUP_DIR}\" mkdir \"${env.BACKUP_DIR}\""
                    
                    // 환경변수 기반 데이터 경로 생성 (커밋 f57efef 반영)
                    bat "if not exist \"${env.WEBSERVICE_DATA_PATH}\" mkdir \"${env.WEBSERVICE_DATA_PATH}\""
                    
                    // 타겟 폴더의 기존 wheel 파일들과 중요 데이터 백업
                    powershell """
                        if (Test-Path "${env.DEPLOY_PATH}") {
                            \$existingWheels = Get-ChildItem -Path "${env.DEPLOY_PATH}" -Filter "*.whl" -ErrorAction SilentlyContinue
                            if (\$existingWheels.Count -gt 0) {
                                Write-Host "기존 wheel 파일 백업 중..."
                                foreach (\$wheel in \$existingWheels) {
                                    Copy-Item -Path \$wheel.FullName -Destination "${env.BACKUP_DIR}" -Force
                                    Write-Host "백업 완료: \$(\$wheel.Name)"
                                }
                            } else {
                                Write-Host "백업할 wheel 파일이 없습니다"
                            }
                            
                            # 환경변수 기반 중요 데이터 백업 (logs, templates 등)
                            if (Test-Path "${env.WEBSERVICE_DATA_PATH}") {
                                Write-Host "환경변수 기반 데이터 디렉토리 백업 중..."
                                if (Test-Path "${env.WEBSERVICE_DATA_PATH}\\templates") {
                                    Copy-Item -Path "${env.WEBSERVICE_DATA_PATH}\\templates" -Destination "${env.BACKUP_DIR}\\templates" -Recurse -Force -ErrorAction SilentlyContinue
                                }
                            }
                        } else {
                            Write-Host "배포 경로가 존재하지 않습니다: ${env.DEPLOY_PATH}"
                            New-Item -Path "${env.DEPLOY_PATH}" -ItemType Directory -Force
                        }
                    """
                    echo "기존 wheel 파일 백업 완료"
                }
            }
        }
        
        stage('Build') {
            steps {
                dir("${WORKSPACE}/webservice") {
                    // Jenkins Workspace에서 wheel 빌드
                    bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m build\""
                    
                    // 빌드 결과 검증
                    script {
                        def whlExists = bat(
                            script: 'if exist "dist\\webservice-*.whl" echo found',
                            returnStdout: true
                        ).contains('found')
                        
                        if (!whlExists) {
                            error("빌드 실패: wheel 파일이 생성되지 않았습니다")
                        }
                    }
                    
                    echo "Wheel 빌드 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Deploy') {
            when { 
                expression { 
                    def branch = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    return branch == 'main' || branch.endsWith('/main')
                }
            }
            steps {
                script {
                    try {
                        // 1단계: Jenkins Workspace에서 빌드된 wheel을 타겟 폴더로 복사 (서비스 중지 전)
                        powershell """
                            \$latestWhl = Get-ChildItem -Path "${WORKSPACE}\\webservice\\dist\\webservice-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$latestWhl) {
                                Write-Host "새 wheel 파일 복사: \$(\$latestWhl.Name)"
                                Copy-Item -Path \$latestWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force
                                Write-Host "복사 완료: ${env.DEPLOY_PATH}\\\$(\$latestWhl.Name)"
                            } else {
                                throw "빌드된 wheel 파일을 찾을 수 없습니다"
                            }
                        """
                        
                        // 2단계: 설정 파일 복사 (config.json)
                        powershell """
                            if (Test-Path "${WORKSPACE}\\webservice\\config.json") {
                                Write-Host "config.json 파일 복사 중..."
                                
                                # Development 경로 (코드와 함께)
                                Copy-Item -Path "${WORKSPACE}\\webservice\\config.json" -Destination "${env.DEPLOY_PATH}\\config.json" -Force
                                Write-Host "config.json 복사 완료 (Development): ${env.DEPLOY_PATH}\\config.json"
                                
                                # Production 경로 (데이터 폴더)
                                if (Test-Path env:WEBSERVICE_DATA_PATH) {
                                    Copy-Item -Path "${WORKSPACE}\\webservice\\config.json" -Destination "${env.WEBSERVICE_DATA_PATH}\\config.json" -Force
                                    Write-Host "config.json 복사 완료 (Production): ${env.WEBSERVICE_DATA_PATH}\\config.json"
                                } else {
                                    Write-Host "WEBSERVICE_DATA_PATH 환경변수가 없어서 Production 경로 생략"
                                }
                            } else {
                                Write-Host "경고: config.json 파일이 소스에 없습니다"
                            }
                        """
                        
                        // 3단계: 새 wheel 파일 설치 준비 (배포 경로 확인)
                        powershell """
                            \$deployWhl = Get-ChildItem -Path "${env.DEPLOY_PATH}\\webservice-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$deployWhl) {
                                Write-Host "배포 준비 완료: \$(\$deployWhl.Name)"
                            } else {
                                throw "타겟 폴더에 wheel 파일이 없습니다"
                            }
                        """
                        
                        // 4단계: 서비스 중지 (빠른 교체를 위해 마지막에)
                        bat 'nssm stop webservice'
                        echo "Webservice 중지 완료"
                        
                        // 5단계: 초고속 wheel 설치 (휠하우스 활용)
                        powershell """
                            \$deployWhl = Get-ChildItem -Path "${env.DEPLOY_PATH}\\webservice-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            Write-Host "효율적인 재설치 시작: \$(\$deployWhl.Name)"
                            
                            # 기존 webservice 패키지만 언인스톨 (의존성은 유지)
                            Write-Host "기존 webservice 패키지 제거 중..."
                            & "${env.DEPLOY_PIP_CMD}" uninstall webservice -y 2>&1 | Out-Null
                            Write-Host "기존 패키지 제거 완료"
                            
                            # 휠하우스가 있으면 오프라인 설치로 속도 최적화 (폐쇄망 호환)
                            if (Test-Path "${env.WHEELHOUSE_PATH}\\*.whl") {
                                Write-Host "휠하우스 발견 - 오프라인 빠른 설치"
                                & "${env.DEPLOY_PIP_CMD}" install \$deployWhl.FullName --no-index --find-links=${env.WHEELHOUSE_PATH} --no-deps
                            } else {
                                Write-Host "일반 설치 모드"
                                & "${env.DEPLOY_PIP_CMD}" install \$deployWhl.FullName --no-deps
                            }
                            Write-Host "설치 완료"
                        """
                        
                        // 6단계: 서비스 즉시 시작 (최소 다운타임)
                        bat 'nssm start webservice'
                        echo "Webservice 시작 완료 - 최소 다운타임으로 배포 완료"
                        
                    } catch (Exception e) {
                        echo "배포 실패: ${e.getMessage()}"
                        // 백업에서 롤백 시도
                        bat 'nssm stop webservice'
                        powershell """
                            if (Test-Path "${env.BACKUP_DIR}\\*.whl") {
                                \$backupWhl = Get-ChildItem -Path "${env.BACKUP_DIR}\\*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                Write-Host "백업에서 롤백 실행: \$(\$backupWhl.FullName)"
                                # 백업을 타겟 폴더로 복사
                                Copy-Item -Path \$backupWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force
                                # 타겟 폴더에서 설치
                                & "${env.DEPLOY_PIP_CMD}" uninstall webservice -y 2>&1 | Out-Null
                                & "${env.DEPLOY_PIP_CMD}" install "\$(\$backupWhl.FullName)" --no-deps
                            }
                        """
                        bat 'nssm start webservice'
                        throw e
                    }
                }
            }
        }
        
        stage('API Health Check') {
            steps {
                script {
                    // 서비스 시작 및 RAG 초기화 대기 (RAG 임베딩 모델 로딩 ~17초 소요)
                    sleep(time: 25, unit: 'SECONDS')
                    
                    // 브랜치에 따라 다른 헬스체크 전략 사용
                    def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    def isProduction = (branchName == 'main' || branchName == 'develop')
                    
                    def endpoints = [:]
                    
                    if (isProduction) {
                        // main/develop: 직접 포트로 체크 (FastAPI는 여전히 /health로 응답)
                        endpoints = [
                            "http://localhost:8000/health": "기본 헬스체크 (직접 포트)",
                            "http://localhost:8000/api": "API 루트 엔드포인트",
                            "http://localhost:8000/api/webservice/v2/scenario/generate": "V2 시나리오 생성 엔드포인트 (OPTIONS)"
                        ]
                    } else {
                        // feature/hotfix: 직접 포트 체크 (nginx 미설정)
                        endpoints = [
                            "http://localhost:8000/health": "기본 헬스체크 (직접)",
                            "http://localhost:8000/api": "API 루트 엔드포인트",
                            "http://localhost:8000/api/webservice/v2/scenario/generate": "V2 시나리오 생성 엔드포인트 (OPTIONS)"
                        ]
                    }
                    
                    def allPassed = true
                    
                    endpoints.each { url, description ->
                        def endpointPassed = false
                        
                        for (int i = 0; i < 3; i++) {
                            try {
                                def response = powershell(
                                    script: """
                                        try {
                                            # V2 엔드포인트는 POST 전용이므로 OPTIONS나 HEAD 사용
                                            if ('${url}'.Contains('v2/scenario/generate')) {
                                                \$result = Invoke-WebRequest -Uri '${url}' -Method OPTIONS -UseBasicParsing -TimeoutSec 10
                                            } else {
                                                \$result = Invoke-WebRequest -Uri '${url}' -UseBasicParsing -TimeoutSec 10
                                            }
                                            Write-Output \$result.StatusCode
                                        } catch {
                                            \$errorMessage = \$_.Exception.Message
                                            if (\$_.Exception.Response) {
                                                \$statusCode = [int]\$_.Exception.Response.StatusCode
                                                Write-Output "\$statusCode"
                                            } else {
                                                Write-Host "Error details: \$errorMessage" -ForegroundColor Red
                                                Write-Output "500"
                                            }
                                        }
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                // OPTIONS 메서드는 405 (Method Not Allowed)를 반환할 수 있음
                                if (response == "200" || (url.contains("v2/scenario/generate") && response == "405")) {
                                    endpointPassed = true
                                    echo "${description} 검증 성공 (${i+1}번째 시도) - HTTP ${response}"
                                    break
                                } else {
                                    echo "${description} 실패 - HTTP ${response} (${i+1}번째 시도)"
                                }
                            } catch (Exception e) {
                                echo "${description} 오류: ${e.getMessage()} (${i+1}번째 시도)"
                            }
                            
                            if (i < 2) sleep(time: 5, unit: 'SECONDS')
                        }
                        
                        if (!endpointPassed) {
                            echo "경고: ${description} 검증 실패"
                            allPassed = false
                        }
                    }
                    
                    if (!allPassed) {
                        echo "일부 API 엔드포인트 검증 실패 - 수동 확인이 필요합니다"
                    } else {
                        echo "모든 API 엔드포인트 검증 완료"
                    }
                }
            }
        }
        
        
        stage('Store Branch Wheel') {
            when {
                expression {
                    def branch = params.BRANCH ?: env.BRANCH_NAME ?: ''
                    // develop 브랜치 추가
                    return branch.startsWith('feature/') || branch.startsWith('hotfix/') || branch == 'develop'
                }
            }
            steps {
                // 브랜치별 wheel 저장 (테스트 배포용)
                script {
                    def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    branchName = branchName.replaceAll(/[^a-zA-Z0-9_-]/, '_')
                    def branchWheelPath = "C:\\deploys\\tests\\${branchName}\\packages\\webservice"
                    
                    powershell """
                        # 브랜치별 wheel 저장 디렉토리 생성
                        New-Item -ItemType Directory -Force -Path "${branchWheelPath}" | Out-Null
                        
                        # 기존 wheel 정리 (오래된 버전 제거)
                        Get-ChildItem -Path "${branchWheelPath}\\webservice-*.whl" | Remove-Item -Force -ErrorAction SilentlyContinue
                        
                        # 새 wheel 복사
                        \$latestWhl = Get-ChildItem -Path "${WORKSPACE}\\webservice\\dist\\webservice-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                        if (\$latestWhl) {
                            Copy-Item -Path \$latestWhl.FullName -Destination "${branchWheelPath}" -Force
                            Write-Host "브랜치별 wheel 저장 완료: ${branchWheelPath}\\\$(\$latestWhl.Name)"
                        } else {
                            throw "빌드된 wheel 파일을 찾을 수 없습니다"
                        }
                    """
                    
                    echo "브랜치 ${branchName} wheel 저장 완료: ${branchWheelPath}"
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                // 빌드된 휠 보관
                archiveArtifacts artifacts: "webservice/dist/*.whl", followSymlinks: false
                echo "빌드된 Webservice Wheel 아티팩트 보관 완료"
                
                // 폐쇄망 환경 설치 가이드 (휠하우스 활용)
                echo """
                =========================================
                폐쇄망 환경 배포 가이드 (휠하우스 활용):
                
                1. ${env.WHEELHOUSE_PATH}\\ 에 의존성 준비
                2. 환경변수 설정: set WEBSERVICE_DATA_PATH=C:\\deploys\\data\\webservice
                3. 가상환경 생성: py -3.12 -m venv .venv
                4. 가상환경 활성화: .venv\\Scripts\\activate
                5. 오프라인 설치: pip install --no-index --find-links=${env.WHEELHOUSE_PATH} webservice-*.whl
                
                휠하우스 준비 (CUDA 포함):
                - pip download --extra-index-url https://download.pytorch.org/whl/cu121 -r requirements.txt -c pip.constraints.txt -d wheelhouse
                - wheelhouse 내용을 ${env.WHEELHOUSE_PATH}\\ 로 복사
                - 이후 모든 배포는 인터넷 없이 초고속 진행 (PyTorch CUDA 포함)
                =========================================
                """
            }
        }
    }
    
    post {
        success {
            echo "Webservice Backend 배포 성공"
        }
        failure {
            echo "Webservice Backend 배포 실패 - 로그를 확인하세요"
        }
        always {
            // Jenkins Workspace 정리
            dir("${WORKSPACE}/webservice") {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                // 테스트로 생성된 파일 정리 (환경변수 기반 경로 고려)
                bat 'if exist "data\\outputs\\*TEST_*" del /f /q "data\\outputs\\*TEST_*"'
                bat 'if exist "outputs\\*TEST_*" del /f /q "outputs\\*TEST_*"'  // 기존 경로 호환성
                // pytest 캐시 정리
                bat 'if exist ".pytest_cache" rmdir /s /q ".pytest_cache"'
                // 임시 파일 강제 정리
                bat 'for /f "tokens=*" %%i in (\'dir /s /b *.xlsx *.json 2^>nul\') do del /f /q "%%i" 2>nul || echo "Skipping locked file: %%i"'
            }
            
            // 배포 환경 정리
            dir(env.DEPLOY_PATH) {
                bat 'if exist "*.tmp" del /f /q *.tmp'
            }
            
            // 환경변수 기반 데이터 경로 정리
            script {
                if (env.WEBSERVICE_DATA_PATH) {
                    dir(env.WEBSERVICE_DATA_PATH) {
                        bat 'if exist "outputs\\*TEST_*" del /f /q "outputs\\*TEST_*"'
                        bat 'if exist "logs\\*TEST_*" del /f /q "logs\\*TEST_*"'
                    }
                }
            }
        }
    }
}