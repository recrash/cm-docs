// webservice/Jenkinsfile.backend
pipeline {
    agent any
    environment {
        PROJECT_PATH = 'C:\\deploys\\cm-docs\\webservice'
        HEALTH_CHECK_URL = 'http://localhost:8000/api/health'
        BACKUP_DIR = 'C:\\deploys\\backup\\webservice'
        PYTHON_CMD = "${PROJECT_PATH}\\.venv\\Scripts\\python.exe"
        PIP_CMD = "${PROJECT_PATH}\\.venv\\Scripts\\pip.exe"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "소스코드 체크아웃 완료"
            }
        }
        
        stage('Dependency Check') {
            steps {
                dir(env.PROJECT_PATH) {
                    script {
                        // requirements.txt 변경 감지
                        def reqChanged = bat(
                            script: 'git diff HEAD~1 HEAD --name-only | findstr requirements.txt',
                            returnStatus: true
                        ) == 0
                        
                        if (reqChanged) {
                            echo "requirements.txt 변경 감지됨 - 의존성 업데이트 실행"
                            bat "powershell -Command \"& '${env.PIP_CMD}' install -r requirements.txt\""
                        }
                        
                        // 의존성 충돌 검사
                        bat "powershell -Command \"& '${env.PIP_CMD}' check\""
                        echo "의존성 검사 완료"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                dir(env.PROJECT_PATH) {
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m pytest tests/api/ -v --tb=short\""
                    echo "API 테스트 완료"
                }
            }
        }
        
        stage('Build Validation') {
            steps {
                dir(env.PROJECT_PATH) {
                    // PYTHONPATH 설정 및 빌드 전 검증
                    bat "powershell -Command \"\$env:PYTHONPATH=\\\"$(Get-Location);$env:PYTHONPATH\\\"; & '${env.PYTHON_CMD}' -c \\\"import src.config_loader; print('모듈 임포트 검증 완료')\\\"\""
                    echo "빌드 전 검증 완료"
                }
            }
        }
        
        stage('Create Backup') {
            steps {
                dir(env.PROJECT_PATH) {
                    script {
                        // 현재 실행 중인 서비스 백업
                        bat """
                            if not exist "${env.BACKUP_DIR}" mkdir "${env.BACKUP_DIR}"
                            if exist "dist" (
                                powershell -Command "Copy-Item -Path 'dist\\*' -Destination '${env.BACKUP_DIR}' -Force -ErrorAction SilentlyContinue"
                            )
                        """
                        echo "백업 생성 완료"
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                dir(env.PROJECT_PATH) {
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m build\""
                    echo "빌드 완료"
                }
            }
        }
        
        stage('Deploy') {
            steps {
                dir(env.PROJECT_PATH) {
                    script {
                        try {
                            // 서비스 중지
                            bat 'nssm stop webservice'
                            echo "웹서비스 중지 완료"
                            
                            // 10초 대기 (사용자 요구사항)
                            sleep(time: 10, unit: 'SECONDS')
                            
                            // 새 버전 설치
                            powershell """
                                \$latestWhl = Get-ChildItem -Path ".\\dist\\webservice-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                Write-Host "새 버전 설치: \$(\$latestWhl.Name)"
                                & "${env.PIP_CMD}" install \$latestWhl.FullName --force-reinstall
                            """
                            
                            // 서비스 시작
                            bat 'nssm start webservice'
                            echo "웹서비스 시작 완료"
                            
                        } catch (Exception e) {
                            echo "배포 실패: ${e.getMessage()}"
                            // 롤백 시도
                            bat 'nssm stop webservice'
                            powershell """
                                if (Test-Path "${env.BACKUP_DIR}\\*.whl") {
                                    \$backupWhl = Get-ChildItem -Path "${env.BACKUP_DIR}\\*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                    Write-Host "롤백 실행: \$(\$backupWhl.Name)"
                                    & "${env.PIP_CMD}" install \$backupWhl.FullName --force-reinstall
                                }
                            """
                            bat 'nssm start webservice'
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    // 서비스 시작 대기
                    sleep(time: 10, unit: 'SECONDS')
                    
                    // 헬스체크 실행 (최대 5회 재시도)
                    def healthCheckPassed = false
                    for (int i = 0; i < 5; i++) {
                        try {
                            def response = bat(
                                script: "curl -s -o nul -w \"%{http_code}\" ${env.HEALTH_CHECK_URL}",
                                returnStdout: true
                            ).trim()
                            
                            if (response == "200") {
                                healthCheckPassed = true
                                echo "헬스체크 성공 (${i+1}번째 시도)"
                                break
                            } else {
                                echo "헬스체크 실패 - HTTP ${response} (${i+1}번째 시도)"
                            }
                        } catch (Exception e) {
                            echo "헬스체크 오류: ${e.getMessage()} (${i+1}번째 시도)"
                        }
                        
                        if (i < 4) sleep(time: 5, unit: 'SECONDS')
                    }
                    
                    if (!healthCheckPassed) {
                        error("헬스체크 실패 - 서비스가 정상적으로 시작되지 않았습니다")
                    }
                    
                    echo "헬스체크 완료 - 서비스가 정상적으로 동작 중입니다"
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: "${env.PROJECT_PATH}/dist/*.whl", followSymlinks: false
                echo "아티팩트 보관 완료"
            }
        }
    }
    
    post {
        success {
            echo "Webservice Backend 배포 성공"
        }
        failure {
            echo "Webservice Backend 배포 실패 - 로그를 확인하세요"
        }
        always {
            // 임시 파일 정리
            dir(env.PROJECT_PATH) {
                bat 'if exist "*.tmp" del /f /q *.tmp'
            }
        }
    }
}