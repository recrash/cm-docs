// autodoc_service/Jenkinsfile
pipeline {
    agent any
    environment {
        PROJECT_PATH = 'C:\\deploys\\cm-docs\\autodoc_service'
        HEALTH_CHECK_URL = 'http://localhost:8001/health'
        BACKUP_DIR = 'C:\\deploys\\backup\\autodoc_service'
        PYTHON_CMD = "${PROJECT_PATH}\\.venv312\\Scripts\\python.exe"
        PIP_CMD = "${PROJECT_PATH}\\.venv312\\Scripts\\pip.exe"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "소스코드 체크아웃 완료"
            }
        }
        
        stage('Dependency Check') {
            steps {
                dir(env.PROJECT_PATH) {
                    script {
                        // requirements.txt 변경 감지
                        def reqChanged = bat(
                            script: 'git diff HEAD~1 HEAD --name-only | findstr requirements.txt',
                            returnStatus: true
                        ) == 0
                        
                        if (reqChanged || !fileExists("${env.PROJECT_PATH}\\.venv312\\Scripts\\pytest.exe")) {
                            echo "의존성 설치 필요 - Python 3.12 환경 설정"
                            
                            // Python 버전 확인
                            bat "powershell -Command \"& '${env.PYTHON_CMD}' --version\""
                            
                            // 의존성 설치 (항상 실행하여 pytest 등 확보)
                            bat "powershell -Command \"& '${env.PIP_CMD}' install -r requirements.txt\""
                            
                            // python-docx, openpyxl 특별 검증
                            bat "powershell -Command \"& '${env.PYTHON_CMD}' -c 'from docx import Document; import openpyxl; print(\\\"핵심 의존성 확인 완료\\\")'\""
                        } else {
                            echo "기존 의존성 사용 - pytest 및 핵심 패키지 확인"
                        }
                        
                        // 의존성 충돌 검사
                        bat "powershell -Command \"& '${env.PIP_CMD}' check\""
                        echo "의존성 검사 완료"
                    }
                }
            }
        }
        
        stage('Template Validation') {
            steps {
                dir(env.PROJECT_PATH) {
                    script {
                        // 필수 템플릿 파일 존재 확인
                        def requiredTemplates = ['template.docx', 'template.xlsx', 'template_list.xlsx']
                        
                        requiredTemplates.each { templateFile ->
                            def exists = bat(
                                script: "if exist \"templates\\${templateFile}\" echo found",
                                returnStdout: true
                            ).contains('found')
                            
                            if (!exists) {
                                error("필수 템플릿 파일이 없습니다: templates/${templateFile}")
                            }
                        }
                        
                        // 템플릿 무결성 검사 (pytest를 통한 SHA-256 검증)
                        bat "powershell -Command \"& '${env.PYTHON_CMD}' -m pytest app/tests/test_templates_present.py -v\""
                        echo "템플릿 검증 완료"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                dir(env.PROJECT_PATH) {
                    // 전체 테스트 실행 (커버리지 포함)
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m pytest app/tests/ -v --cov=app --cov-report=term\""
                    
                    // 특별히 중요한 문서 생성 테스트 개별 실행
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m pytest app/tests/test_builder_word_label.py -v\""
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m pytest app/tests/test_builder_excel_test.py -v\""
                    
                    echo "AutoDoc Service 테스트 완료"
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                dir(env.PROJECT_PATH) {
                    // FastAPI 통합 테스트
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m pytest app/tests/test_fastapi_integration.py -v\""
                    
                    // 로깅 시스템 테스트
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m pytest app/tests/test_logging_system.py -v\""
                    
                    echo "통합 테스트 완료"
                }
            }
        }
        
        stage('Create Backup') {
            steps {
                dir(env.PROJECT_PATH) {
                    script {
                        // 현재 실행 중인 서비스 백업
                        bat """
                            if not exist "${env.BACKUP_DIR}" mkdir "${env.BACKUP_DIR}"
                            if exist "dist" (
                                powershell -Command "Copy-Item -Path 'dist\\*' -Destination '${env.BACKUP_DIR}' -Force -ErrorAction SilentlyContinue"
                            )
                        """
                        echo "백업 생성 완료"
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                dir(env.PROJECT_PATH) {
                    bat "powershell -Command \"& '${env.PYTHON_CMD}' -m build\""
                    
                    // 빌드 결과 검증
                    script {
                        def whlExists = bat(
                            script: 'if exist "dist\\autodoc_service-*.whl" echo found',
                            returnStdout: true
                        ).contains('found')
                        
                        if (!whlExists) {
                            error("빌드 실패: wheel 파일이 생성되지 않았습니다")
                        }
                    }
                    
                    echo "빌드 완료"
                }
            }
        }
        
        stage('Deploy') {
            steps {
                dir(env.PROJECT_PATH) {
                    script {
                        try {
                            // 서비스 중지
                            bat 'nssm stop autodoc_service'
                            echo "AutoDoc Service 중지 완료"
                            
                            // 10초 대기 (사용자 요구사항)
                            sleep(time: 10, unit: 'SECONDS')
                            
                            // 새 버전 설치
                            powershell """
                                \$latestWhl = Get-ChildItem -Path ".\\dist\\autodoc_service-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                Write-Host "새 버전 설치: \$(\$latestWhl.Name)"
                                & "${env.PIP_CMD}" install \$latestWhl.FullName --force-reinstall
                            """
                            
                            // 서비스 시작
                            bat 'nssm start autodoc_service'
                            echo "AutoDoc Service 시작 완료"
                            
                        } catch (Exception e) {
                            echo "배포 실패: ${e.getMessage()}"
                            // 롤백 시도
                            bat 'nssm stop autodoc_service'
                            powershell """
                                if (Test-Path "${env.BACKUP_DIR}\\*.whl") {
                                    \$backupWhl = Get-ChildItem -Path "${env.BACKUP_DIR}\\*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                    Write-Host "롤백 실행: \$(\$backupWhl.Name)"
                                    & "${env.PIP_CMD}" install \$backupWhl.FullName --force-reinstall
                                }
                            """
                            bat 'nssm start autodoc_service'
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('API Health Check') {
            steps {
                script {
                    // 서비스 시작 대기
                    sleep(time: 15, unit: 'SECONDS')
                    
                    def endpoints = [
                        "${env.HEALTH_CHECK_URL}": "기본 헬스체크",
                        "http://localhost:8001/": "루트 엔드포인트",
                        "http://localhost:8001/templates": "템플릿 목록"
                    ]
                    
                    def allPassed = true
                    
                    endpoints.each { url, description ->
                        def endpointPassed = false
                        
                        for (int i = 0; i < 3; i++) {
                            try {
                                def response = bat(
                                    script: "curl -s -o nul -w \"%{http_code}\" ${url}",
                                    returnStdout: true
                                ).trim()
                                
                                if (response == "200") {
                                    endpointPassed = true
                                    echo "${description} 검증 성공 (${i+1}번째 시도)"
                                    break
                                } else {
                                    echo "${description} 실패 - HTTP ${response} (${i+1}번째 시도)"
                                }
                            } catch (Exception e) {
                                echo "${description} 오류: ${e.getMessage()} (${i+1}번째 시도)"
                            }
                            
                            if (i < 2) sleep(time: 5, unit: 'SECONDS')
                        }
                        
                        if (!endpointPassed) {
                            echo "경고: ${description} 검증 실패"
                            allPassed = false
                        }
                    }
                    
                    if (!allPassed) {
                        echo "일부 API 엔드포인트 검증 실패 - 수동 확인이 필요합니다"
                    } else {
                        echo "모든 API 엔드포인트 검증 완료"
                    }
                }
            }
        }
        
        stage('Document Generation Test') {
            steps {
                script {
                    // 실제 문서 생성 테스트
                    sleep(time: 5, unit: 'SECONDS')
                    
                    try {
                        // 간단한 Word 문서 생성 테스트
                        def wordTestResult = bat(
                            script: """curl -X POST "http://localhost:8001/create-cm-word-enhanced" ^
                                -H "Content-Type: application/json" ^
                                -d "{\\"change_request\\": {\\"change_id\\": \\"TEST_${BUILD_NUMBER}\\", \\"system\\": \\"테스트\\", \\"title\\": \\"배포 테스트\\", \\"requester\\": \\"Jenkins\\"}}" ^
                                -w "%%{http_code}" -o nul""",
                            returnStdout: true
                        ).trim()
                        
                        if (wordTestResult == "200") {
                            echo "문서 생성 테스트 성공"
                        } else {
                            echo "경고: 문서 생성 테스트 실패 - HTTP ${wordTestResult}"
                        }
                        
                    } catch (Exception e) {
                        echo "문서 생성 테스트 오류: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: "${env.PROJECT_PATH}/dist/*.whl", followSymlinks: false
                echo "아티팩트 보관 완료"
            }
        }
    }
    
    post {
        success {
            echo "AutoDoc Service 배포 성공"
        }
        failure {
            echo "AutoDoc Service 배포 실패 - 로그를 확인하세요"
        }
        always {
            // 임시 파일 정리
            dir(env.PROJECT_PATH) {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                // 테스트로 생성된 문서 정리
                bat 'if exist "documents\\*TEST_*" del /f /q "documents\\*TEST_*"'
            }
        }
    }
}