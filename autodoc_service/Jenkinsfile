// autodoc_service/Jenkinsfile
pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch name')
    }

    environment {
        // Jenkins Workspace (빌드/테스트용)
        WORKSPACE_PYTHON_CMD = "${WORKSPACE}\\autodoc_service\\.venv312\\Scripts\\python.exe"
        WORKSPACE_PIP_CMD = "${WORKSPACE}\\autodoc_service\\.venv312\\Scripts\\pip.exe"
        
        // 배포 경로 (운영 서비스용) - 새 폴더 구조 반영
        DEPLOY_PATH = 'C:\\deploys\\apps\\autodoc_service'
        DEPLOY_PYTHON_CMD = "${DEPLOY_PATH}\\.venv312\\Scripts\\python.exe"
        DEPLOY_PIP_CMD = "${DEPLOY_PATH}\\.venv312\\Scripts\\pip.exe"
        
        // 공유 캐시 폴더
        WHEELHOUSE_PATH = 'C:\\deploys\\packages\\wheelhouse'
        
        // 환경변수 기반 데이터 경로 (커밋 f57efef)
        AUTODOC_DATA_PATH = 'C:\\deploys\\data\\autodoc_service'
        
        // 기타 설정
        HEALTH_CHECK_URL = 'http://localhost:8001/api/autodoc/health'  // root_path 반영
        BACKUP_DIR = 'C:\\deploys\\backup\\apps\\autodoc_service'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // 현재 체크아웃된 브랜치 확인
                    def currentBranch = bat(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    
                    echo "소스코드 체크아웃 완료 - 현재 브랜치: ${currentBranch}"
                    
                    // 파라미터로 받은 브랜치와 비교
                    if (params.BRANCH) {
                        echo "요청된 브랜치: ${params.BRANCH}"
                        if (currentBranch != params.BRANCH && !currentBranch.endsWith("/${params.BRANCH}")) {
                            echo "경고: 요청된 브랜치와 현재 브랜치가 다를 수 있습니다"
                        }
                    }
                }
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    script {
                        echo "빠른 테스트 환경 구축 (휠하우스 활용)"
                        
                        // 기존 가상환경 정리
                        bat '''
                            if exist .venv312 (
                                echo Removing existing virtual environment
                                rmdir /S /Q .venv312 2>nul || echo "Directory already cleaned"
                            )
                        '''
                        
                        // Python 3.12 가상환경 생성 (환경 격리)
                        echo "Python 환경 격리로 가상환경 생성 중..."
                        bat '''
                        (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo py %%*) > py_clean.bat
                        py_clean.bat -3.12 -m venv .venv312
                        del py_clean.bat
                        '''
                        
                        // 가상환경 생성 검증
                        def venvExists = bat(
                            script: 'if exist ".venv312\\Scripts\\python.exe" echo found',
                            returnStdout: true
                        ).contains('found')
                        
                        if (!venvExists) {
                            error("가상환경 생성 실패: .venv312\\Scripts\\python.exe를 찾을 수 없습니다")
                        }
                        echo "가상환경 생성 검증 완료"
                        
                        // pip 메모리 최적화 업그레이드 (메모리 오류 방지)
                        echo "pip 업그레이드 중 (메모리 최적화)..."

                        // 단순한 batch 명령어로 변경 (구문 오류 방지)
                        bat '''
                        set PIP_NO_CACHE_DIR=1
                        set PIP_DISABLE_PIP_VERSION_CHECK=1
                        set PIP_NO_BUILD_ISOLATION=1

                        (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv312\\Scripts\\python.exe" %%*) > python_clean.bat

                        if exist "C:\\deploys\\packages\\wheelhouse\\pip-*.whl" (
                            echo 휠하우스에서 pip 업그레이드 중...
                            python_clean.bat -m pip install --no-index --find-links="C:\\deploys\\packages\\wheelhouse" --upgrade pip --no-cache-dir
                        ) else (
                            echo 기본 pip 업그레이드 중...
                            python_clean.bat -m pip install --upgrade pip --no-cache-dir
                        )

                        del python_clean.bat
                        echo ✅ pip 업그레이드 완료
                        '''
                        
                        // 휠하우스 활용 고속 설치
                        script {
                            def wheelHouseExists = fileExists(env.WHEELHOUSE_PATH)
                            
                            if (wheelHouseExists) {
                                echo "휠하우스 발견 - 오프라인 고속 설치 모드 (폐쇄망 호환)"
                                bat '''
                                (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv312\\Scripts\\pip.exe" %%*) > pip_clean.bat
                                pip_clean.bat install --no-index --find-links=C:\\deploys\\packages\\wheelhouse -r requirements.txt
                                del pip_clean.bat
                                '''
                            } else {
                                echo "휠하우스 없음 - 온라인 설치 (느림)"
                                bat '''
                                (echo @echo off & echo set "PYTHONHOME=" & echo set "PYTHONPATH=" & echo ".venv312\\Scripts\\pip.exe" %%*) > pip_clean.bat
                                pip_clean.bat install -r requirements.txt
                                del pip_clean.bat
                                '''
                            }
                        }
                        
                        // 최소 검증만 수행 (시간 단축)
                        bat "powershell -Command \"\$env:PYTHONHOME=''; \$env:PYTHONPATH=''; \$env:PYTHONIOENCODING='utf-8'; & '.venv312\\Scripts\\python.exe' -c \\\"from docx import Document; print('Test environment ready')\\\"\""
                        
                        echo "테스트 환경 구축 완료 (최적화됨)"
                    }
                }
            }
        }
        
        stage('Template Validation') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    script {
                        // 필수 템플릿 파일 존재 확인
                        def requiredTemplates = ['template.docx', 'template.xlsx', 'template_list.xlsx']
                        
                        requiredTemplates.each { templateFile ->
                            def exists = bat(
                                script: "if exist \"templates\\${templateFile}\" echo found",
                                returnStdout: true
                            ).contains('found')
                            
                            if (!exists) {
                                error("필수 템플릿 파일이 없습니다: templates/${templateFile}")
                            }
                        }
                        
                        // 템플릿 무결성 검사 (Jenkins Workspace에서 실행)
                        bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_templates_present.py -v\""
                        echo "템플릿 검증 완료"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // 전체 테스트 실행 (Windows 콘솔 인코딩 및 파일 핸들 문제 해결)
                    bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/ -v -x --tb=short --disable-warnings\""

                    // 특별히 중요한 문서 생성 테스트 개별 실행
                    bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_builder_word_label.py -v\""
                    bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_builder_excel_test.py -v\""
                    
                    echo "AutoDoc Service 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // FastAPI 통합 테스트 (Jenkins Workspace에서 실행)
                    bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_fastapi_integration.py -v\""

                    // 로깅 시스템 테스트
                    bat "powershell -Command \"\$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_logging_system.py -v\""
                    
                    echo "통합 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Create Backup') {
            steps {
                script {
                    // 백업 디렉토리 생성
                    bat "if not exist \"${env.BACKUP_DIR}\" mkdir \"${env.BACKUP_DIR}\""
                    
                    // 환경변수 기반 데이터 경로 생성 (커밋 f57efef 반영)
                    bat "if not exist \"${env.AUTODOC_DATA_PATH}\" mkdir \"${env.AUTODOC_DATA_PATH}\""
                    
                    // 타겟 폴더의 기존 wheel 파일들과 중요 데이터 백업
                    powershell """
                        if (Test-Path "${env.DEPLOY_PATH}") {
                            \$existingWheels = Get-ChildItem -Path "${env.DEPLOY_PATH}" -Filter "*.whl" -ErrorAction SilentlyContinue
                            if (\$existingWheels.Count -gt 0) {
                                Write-Host "기존 wheel 파일 백업 중..."
                                foreach (\$wheel in \$existingWheels) {
                                    Copy-Item -Path \$wheel.FullName -Destination "${env.BACKUP_DIR}" -Force
                                    Write-Host "백업 완료: \$(\$wheel.Name)"
                                }
                            } else {
                                Write-Host "백업할 wheel 파일이 없습니다"
                            }
                            
                            # 환경변수 기반 중요 데이터 백업 (templates, documents 등)
                            if (Test-Path "${env.AUTODOC_DATA_PATH}") {
                                Write-Host "환경변수 기반 데이터 디렉토리 백업 중..."
                                if (Test-Path "${env.AUTODOC_DATA_PATH}\\templates") {
                                    Copy-Item -Path "${env.AUTODOC_DATA_PATH}\\templates" -Destination "${env.BACKUP_DIR}\\templates" -Recurse -Force -ErrorAction SilentlyContinue
                                }
                                if (Test-Path "${env.AUTODOC_DATA_PATH}\\documents") {
                                    # 중요 문서만 백업 (테스트 제외)
                                    Get-ChildItem -Path "${env.AUTODOC_DATA_PATH}\\documents" -Exclude "*TEST_*" | Copy-Item -Destination "${env.BACKUP_DIR}\\documents" -Recurse -Force -ErrorAction SilentlyContinue
                                }
                            }
                        } else {
                            Write-Host "배포 경로가 존재하지 않습니다: ${env.DEPLOY_PATH}"
                            New-Item -Path "${env.DEPLOY_PATH}" -ItemType Directory -Force
                        }
                    """
                    echo "기존 wheel 파일 백업 완료"
                }
            }
        }
        
        stage('Build') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // Jenkins Workspace에서 wheel 빌드
                    bat "powershell -Command \"\$env:PYTHONHOME=''; \$env:PYTHONPATH=''; \$env:PYTHONIOENCODING='utf-8'; & '${env.WORKSPACE_PYTHON_CMD}' -m build\""
                    
                    // 빌드 결과 검증
                    script {
                        def whlExists = bat(
                            script: 'if exist "dist\\autodoc_service-*.whl" echo found',
                            returnStdout: true
                        ).contains('found')
                        
                        if (!whlExists) {
                            error("빌드 실패: wheel 파일이 생성되지 않았습니다")
                        }
                    }
                    
                    echo "Wheel 빌드 완료 (Jenkins Workspace)"
                }
            }
        }
        
        
        stage('Deploy') {
            when { 
                expression { 
                    def branch = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    return branch == 'main' || branch.endsWith('/main')
                }
            }
            steps {
                script {
                    try {
                        // 서비스 상태 확인 후 적절한 중지
                        powershell """
                            try {
                                \$status = nssm status autodoc_service
                                Write-Host "현재 서비스 상태: \$status"
                                
                                if (\$status -eq "SERVICE_PAUSED") {
                                    Write-Host "일시중지 상태 감지 - CONTINUE 후 중지"
                                    nssm continue autodoc_service
                                    Start-Sleep -Seconds 3
                                }
                                
                                Write-Host "서비스 중지 시작"
                                nssm stop autodoc_service
                                Start-Sleep -Seconds 2
                                
                                # 중지 확인
                                \$finalStatus = nssm status autodoc_service
                                Write-Host "최종 상태: \$finalStatus"
                                
                            } catch {
                                Write-Host "서비스 제어 중 오류: \$(\$_.Exception.Message)"
                                # 강제 중지 시도
                                sc stop "autodoc_service" 2>\$null
                            }
                        """
                        echo "AutoDoc Service 중지 완료"
                        
                        // 15초 대기 (강제 재배포를 위해 증가)
                        sleep(time: 15, unit: 'SECONDS')
                        
                        // 기존 wheel 파일 강제 삭제 (캐시 문제 방지)
                        powershell """
                            Write-Host "기존 wheel 파일 정리 중..."
                            Get-ChildItem -Path "${env.DEPLOY_PATH}\\autodoc_service-*.whl" | Remove-Item -Force -ErrorAction SilentlyContinue
                            Write-Host "기존 wheel 파일 정리 완료"
                        """
                        
                        // 1단계: Jenkins Workspace에서 빌드된 wheel을 타겟 폴더로 복사
                        powershell """
                            \$latestWhl = Get-ChildItem -Path "${WORKSPACE}\\autodoc_service\\dist\\autodoc_service-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$latestWhl) {
                                Write-Host "새 wheel 파일 복사: \$(\$latestWhl.Name)"
                                Copy-Item -Path \$latestWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force
                                Write-Host "복사 완료: ${env.DEPLOY_PATH}\\\$(\$latestWhl.Name)"
                            } else {
                                throw "빌드된 wheel 파일을 찾을 수 없습니다"
                            }
                        """
                        
                        // 2단계: 초고속 wheel 설치 (휠하우스 활용)
                        powershell """
                            \$deployWhl = Get-ChildItem -Path "${env.DEPLOY_PATH}\\autodoc_service-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$deployWhl) {
                                Write-Host "효율적인 재설치 시작: \$(\$deployWhl.Name)"
                                
                                # 기존 autodoc_service 패키지만 언인스톨 (의존성은 유지)
                                Write-Host "기존 autodoc_service 패키지 제거 중..."

                                # pip wrapper 생성 (환경 격리) - 절대 경로 사용
                                \$wrapperPath = "\$env:TEMP\\pip_autodoc_clean_\$((Get-Random)).bat"
                                \$pipWrapper = @"
@echo off
set "PYTHONHOME="
set "PYTHONPATH="
"${env.DEPLOY_PATH}\\.venv312\\Scripts\\pip.exe" %*
"@
                                \$pipWrapper | Out-File -FilePath \$wrapperPath -Encoding ascii

                                try {
                                    & \$wrapperPath uninstall autodoc-service -y 2>&1 | Out-Null
                                    Write-Host "기존 패키지 제거 완료"

                                    # 휠하우스가 있으면 오프라인 설치로 속도 최적화 (폐쇄망 호환)
                                    if (Test-Path "C:\\deploys\\packages\\wheelhouse\\*.whl") {
                                        Write-Host "휠하우스 발견 - 오프라인 빠른 설치"
                                        & \$wrapperPath install \$deployWhl.FullName --no-index --find-links=${env.WHEELHOUSE_PATH} --no-deps
                                    } else {
                                        Write-Host "일반 설치 모드"
                                        & \$wrapperPath install \$deployWhl.FullName --no-deps
                                    }
                                } finally {
                                    # pip wrapper 정리
                                    Remove-Item \$wrapperPath -Force -ErrorAction SilentlyContinue
                                }
                                Write-Host "설치 완료"
                            } else {
                                throw "타겟 폴더에 wheel 파일이 없습니다"
                            }
                        """
                        
                        // 서비스 시작 (상태 확인 포함)
                        powershell """
                            try {
                                Write-Host "AutoDoc Service 시작 중..."
                                nssm start autodoc_service
                                Start-Sleep -Seconds 3
                                
                                # 시작 상태 확인
                                \$status = nssm status autodoc_service
                                Write-Host "서비스 시작 후 상태: \$status"
                                
                                if (\$status -ne "SERVICE_RUNNING") {
                                    Write-Host "경고: 서비스가 정상 실행 상태가 아닙니다"
                                }
                                
                            } catch {
                                Write-Host "서비스 시작 중 오류: \$(\$_.Exception.Message)"
                                throw
                            }
                        """
                        echo "AutoDoc Service 시작 완료"
                        
                    } catch (Exception e) {
                        echo "배포 실패: ${e.getMessage()}"
                        // 백업에서 롤백 시도 - 서비스 적절한 중지
                        powershell """
                            try {
                                \$status = nssm status autodoc_service
                                if (\$status -eq "SERVICE_PAUSED") {
                                    nssm continue autodoc_service
                                    Start-Sleep -Seconds 2
                                }
                                nssm stop autodoc_service
                            } catch {
                                sc stop "autodoc_service" 2>\$null
                            }
                        """
                        powershell """
                            if (Test-Path "${env.BACKUP_DIR}\\*.whl") {
                                \$backupWhl = Get-ChildItem -Path "${env.BACKUP_DIR}\\*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                Write-Host "백업에서 롤백 실행: \$(\$backupWhl.FullName)"
                                # 백업을 타겟 폴더로 복사
                                Copy-Item -Path \$backupWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force

                                # pip wrapper 생성 (환경 격리) - 절대 경로 사용
                                \$rollbackWrapperPath = "\$env:TEMP\\pip_rollback_\$((Get-Random)).bat"
                                \$pipWrapper = @"
@echo off
set "PYTHONHOME="
set "PYTHONPATH="
"${env.DEPLOY_PATH}\\.venv312\\Scripts\\pip.exe" %*
"@
                                \$pipWrapper | Out-File -FilePath \$rollbackWrapperPath -Encoding ascii

                                try {
                                    # 타겟 폴더에서 설치
                                    & \$rollbackWrapperPath uninstall autodoc-service -y 2>&1 | Out-Null
                                    & \$rollbackWrapperPath install "\$(\$backupWhl.FullName)" --no-deps
                                } finally {
                                    Remove-Item \$rollbackWrapperPath -Force -ErrorAction SilentlyContinue
                                }
                            }
                        """
                        bat 'nssm start autodoc_service'
                        throw e
                    }
                }
            }
        }
        
        stage('API Health Check') {
            steps {
                script {
                    // 서비스 시작 대기
                    sleep(time: 15, unit: 'SECONDS')
                    
                    // 브랜치에 따라 다른 헬스체크 전략 사용
                    def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    def isProduction = (branchName == 'main' || branchName == 'develop')
                    
                    def endpoints = [:]
                    
                    if (isProduction) {
                        // main/develop: 직접 포트로 체크 (FastAPI는 여전히 /health로 응답)
                        endpoints = [
                            "http://localhost:8001/health": "기본 헬스체크 (직접 포트)",
                            "http://localhost:8001/": "루트 엔드포인트",
                            "http://localhost:8001/templates": "템플릿 목록"
                        ]
                    } else {
                        // feature/hotfix: 직접 포트 체크 (nginx 미설정)
                        endpoints = [
                            "http://localhost:8001/health": "기본 헬스체크 (직접)",
                            "http://localhost:8001/": "루트 엔드포인트",
                            "http://localhost:8001/templates": "템플릿 목록"
                        ]
                    }
                    
                    def allPassed = true
                    
                    endpoints.each { url, description ->
                        def endpointPassed = false
                        
                        for (int i = 0; i < 3; i++) {
                            try {
                                def response = powershell(
                                    script: """
                                        try {
                                            \$result = Invoke-WebRequest -Uri '${url}' -UseBasicParsing -TimeoutSec 10
                                            Write-Output \$result.StatusCode
                                        } catch {
                                            Write-Output "500"
                                        }
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                if (response == "200") {
                                    endpointPassed = true
                                    echo "${description} 검증 성공 (${i+1}번째 시도)"
                                    break
                                } else {
                                    echo "${description} 실패 - HTTP ${response} (${i+1}번째 시도)"
                                }
                            } catch (Exception e) {
                                echo "${description} 오류: ${e.getMessage()} (${i+1}번째 시도)"
                            }
                            
                            if (i < 2) sleep(time: 5, unit: 'SECONDS')
                        }
                        
                        if (!endpointPassed) {
                            echo "경고: ${description} 검증 실패"
                            allPassed = false
                        }
                    }
                    
                    if (!allPassed) {
                        echo "일부 API 엔드포인트 검증 실패 - 수동 확인이 필요합니다"
                    } else {
                        echo "모든 API 엔드포인트 검증 완료"
                    }
                }
            }
        }
        
        stage('Document Generation Test') {
            steps {
                script {
                    // 실제 문서 생성 테스트
                    sleep(time: 5, unit: 'SECONDS')
                    
                    try {
                        // 간단한 Word 문서 생성 테스트
                        def wordTestResult = bat(
                            script: """curl -X POST "http://localhost:8001/create-cm-word-enhanced" ^
                                -H "Content-Type: application/json" ^
                                -d "{\\"change_request\\": {\\"change_id\\": \\"TEST_${BUILD_NUMBER}\\", \\"system\\": \\"테스트\\", \\"title\\": \\"배포 테스트\\", \\"requester\\": \\"Jenkins\\"}}" ^
                                -w "%%{http_code}" -o nul""",
                            returnStdout: true
                        ).trim()
                        
                        if (wordTestResult == "200") {
                            echo "문서 생성 테스트 성공"
                        } else {
                            echo "경고: 문서 생성 테스트 실패 - HTTP ${wordTestResult}"
                        }
                        
                    } catch (Exception e) {
                        echo "문서 생성 테스트 오류: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Store Branch Wheel') {
            when {
                expression {
                    def branch = params.BRANCH ?: env.BRANCH_NAME ?: ''
                    // develop 브랜치 추가
                    return branch.startsWith('feature/') || branch.startsWith('hotfix/') || branch == 'develop'
                }
            }
            steps {
                // 브랜치별 wheel 저장 (테스트 배포용)
                script {
                    def branchName = params.BRANCH ?: env.BRANCH_NAME ?: 'unknown'
                    branchName = branchName.replaceAll(/[^a-zA-Z0-9_-]/, '_')
                    def branchWheelPath = "C:\\deploys\\tests\\${branchName}\\packages\\autodoc_service"
                    
                    powershell """
                        # 브랜치별 wheel 저장 디렉토리 생성
                        New-Item -ItemType Directory -Force -Path "${branchWheelPath}" | Out-Null
                        
                        # 기존 wheel 정리 (오래된 버전 제거)
                        Get-ChildItem -Path "${branchWheelPath}\\autodoc_service-*.whl" | Remove-Item -Force -ErrorAction SilentlyContinue
                        
                        # 새 wheel 복사
                        \$latestWhl = Get-ChildItem -Path "${WORKSPACE}\\autodoc_service\\dist\\autodoc_service-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                        if (\$latestWhl) {
                            Copy-Item -Path \$latestWhl.FullName -Destination "${branchWheelPath}" -Force
                            Write-Host "브랜치별 wheel 저장 완료: ${branchWheelPath}\\\$(\$latestWhl.Name)"
                        } else {
                            throw "빌드된 wheel 파일을 찾을 수 없습니다"
                        }
                    """
                    
                    echo "브랜치 ${branchName} wheel 저장 완료: ${branchWheelPath}"
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                // 빌드된 휠 보관
                archiveArtifacts artifacts: "autodoc_service/dist/*.whl", followSymlinks: false
                echo "빌드된 AutoDoc Service Wheel 아티팩트 보관 완료"
                
                // 폐쇄망 환경 설치 가이드 (휠하우스 활용)
                echo """
                =========================================
                폐쇄망 환경 배포 가이드 (휠하우스 활용):
                
                1. C:\\deploys\\packages\\wheelhouse\\ 에 의존성 준비
                2. 환경변수 설정: set AUTODOC_DATA_PATH=C:\\deploys\\data\\autodoc_service
                3. 가상환경 생성: py -3.12 -m venv .venv312
                4. 가상환경 활성화: .venv312\\Scripts\\activate
                5. 오프라인 설치: pip install --no-index --find-links=${env.WHEELHOUSE_PATH} autodoc_service-*.whl
                
                휠하우스 준비:
                - download-all-dependencies.sh 실행 → wheelhouse 폴더 생성
                - wheelhouse 내용을 C:\\deploys\\packages\\wheelhouse\\ 로 복사
                - 이후 모든 배포는 인터넷 없이 초고속 진행
                =========================================
                """
            }
        }
    }
    
    post {
        success {
            echo "AutoDoc Service 배포 성공"
        }
        failure {
            echo "AutoDoc Service 배포 실패 - 로그를 확인하세요"
        }
        always {
            // Jenkins Workspace 정리
            dir("${WORKSPACE}/autodoc_service") {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                // 테스트로 생성된 문서 정리 (환경변수 기반 경로 고려)
                bat 'if exist "data\\documents\\*TEST_*" del /f /q "data\\documents\\*TEST_*"'
                bat 'if exist "documents\\*TEST_*" del /f /q "documents\\*TEST_*"'  // 기존 경로 호환성
                // pytest 캐시 정리
                bat 'if exist ".pytest_cache" rmdir /s /q ".pytest_cache"'
                // 임시 파일 강제 정리
                bat 'for /f "tokens=*" %%i in (\'dir /s /b *.xlsx *.docx 2^>nul\') do del /f /q "%%i" 2>nul || echo "Skipping locked file: %%i"'
            }
            
            // 배포 환경 정리
            dir(env.DEPLOY_PATH) {
                bat 'if exist "*.tmp" del /f /q *.tmp'
            }
            
            // 환경변수 기반 데이터 경로 정리
            script {
                if (env.AUTODOC_DATA_PATH) {
                    dir(env.AUTODOC_DATA_PATH) {
                        bat 'if exist "documents\\*TEST_*" del /f /q "documents\\*TEST_*"'
                        bat 'if exist "logs\\*TEST_*" del /f /q "logs\\*TEST_*"'
                    }
                }
            }
        }
    }
}