// autodoc_service/Jenkinsfile
pipeline {
    agent any
    environment {
        // Jenkins Workspace (빌드/테스트용)
        WORKSPACE_PYTHON_CMD = "${WORKSPACE}\\autodoc_service\\.venv312\\Scripts\\python.exe"
        WORKSPACE_PIP_CMD = "${WORKSPACE}\\autodoc_service\\.venv312\\Scripts\\pip.exe"
        
        // 배포 경로 (운영 서비스용)
        DEPLOY_PATH = 'C:\\deploys\\cm-docs\\autodoc_service'
        DEPLOY_PYTHON_CMD = "${DEPLOY_PATH}\\.venv312\\Scripts\\python.exe"
        DEPLOY_PIP_CMD = "${DEPLOY_PATH}\\.venv312\\Scripts\\pip.exe"
        
        // 기타 설정
        HEALTH_CHECK_URL = 'http://localhost:8001/health'
        BACKUP_DIR = 'C:\\deploys\\backup\\autodoc_service'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "소스코드 체크아웃 완료"
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    script {
                        echo "Jenkins Workspace에서 테스트 환경 구축"
                        
                        // Python 3.12 가상환경 생성
                        bat '"%LOCALAPPDATA%\\Programs\\Python\\Launcher\\py.exe" -3.12 -m venv .venv312'
                        
                        // Python 버전 확인
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' --version\""
                        
                        // 의존성 설치 (Windows pip 업그레이드 이슈 해결)
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pip install --upgrade pip\""
                        bat "powershell -Command \"& '${env.WORKSPACE_PIP_CMD}' install -r requirements.txt\""
                        
                        // 핵심 의존성 검증 (따옴표 이스케이프 문제 해결)
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -c \\\"from docx import Document; import openpyxl; import pytest; print('Dependencies verified successfully')\\\"\""
                        
                        echo "Jenkins Workspace 테스트 환경 구축 완료"
                    }
                }
            }
        }
        
        stage('Template Validation') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    script {
                        // 필수 템플릿 파일 존재 확인
                        def requiredTemplates = ['template.docx', 'template.xlsx', 'template_list.xlsx']
                        
                        requiredTemplates.each { templateFile ->
                            def exists = bat(
                                script: "if exist \"templates\\${templateFile}\" echo found",
                                returnStdout: true
                            ).contains('found')
                            
                            if (!exists) {
                                error("필수 템플릿 파일이 없습니다: templates/${templateFile}")
                            }
                        }
                        
                        // 템플릿 무결성 검사 (Jenkins Workspace에서 실행)
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_templates_present.py -v\""
                        echo "템플릿 검증 완료"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // 전체 테스트 실행 (Windows 콘솔 인코딩 및 파일 핸들 문제 해결)
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/ -v -x --tb=short --disable-warnings\""
                    
                    // 특별히 중요한 문서 생성 테스트 개별 실행
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_builder_word_label.py -v\""
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_builder_excel_test.py -v\""
                    
                    echo "AutoDoc Service 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // FastAPI 통합 테스트 (Jenkins Workspace에서 실행)
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_fastapi_integration.py -v\""
                    
                    // 로깅 시스템 테스트
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_logging_system.py -v\""
                    
                    echo "통합 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Create Backup') {
            steps {
                dir(env.DEPLOY_PATH) {
                    script {
                        // 현재 배포 환경의 서비스 백업
                        bat """
                            if not exist "${env.BACKUP_DIR}" mkdir "${env.BACKUP_DIR}"
                            if exist "dist" (
                                powershell -Command "Copy-Item -Path 'dist\\*' -Destination '${env.BACKUP_DIR}' -Force -ErrorAction SilentlyContinue"
                            )
                        """
                        echo "기존 배포 서비스 백업 완료"
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // Jenkins Workspace에서 wheel 빌드
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m build\""
                    
                    // 빌드 결과 검증
                    script {
                        def whlExists = bat(
                            script: 'if exist "dist\\autodoc_service-*.whl" echo found',
                            returnStdout: true
                        ).contains('found')
                        
                        if (!whlExists) {
                            error("빌드 실패: wheel 파일이 생성되지 않았습니다")
                        }
                    }
                    
                    echo "Wheel 빌드 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    try {
                        // 서비스 중지
                        bat 'nssm stop autodoc_service'
                        echo "AutoDoc Service 중지 완료"
                        
                        // 10초 대기 (사용자 요구사항)
                        sleep(time: 10, unit: 'SECONDS')
                        
                        // Jenkins Workspace에서 빌드된 wheel을 배포 환경에 설치
                        powershell """
                            \$latestWhl = Get-ChildItem -Path "${WORKSPACE}\\autodoc_service\\dist\\autodoc_service-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            Write-Host "새 버전 배포: \$(\$latestWhl.Name)"
                            & "${env.DEPLOY_PIP_CMD}" install \$latestWhl.FullName --force-reinstall
                        """
                        
                        // 서비스 시작
                        bat 'nssm start autodoc_service'
                        echo "AutoDoc Service 시작 완료"
                        
                    } catch (Exception e) {
                        echo "배포 실패: ${e.getMessage()}"
                        // 중앙화된 백업에서 롤백 시도
                        bat 'nssm stop autodoc_service'
                        powershell """
                            if (Test-Path "${env.BACKUP_DIR}\\*.whl") {
                                \$backupWhl = Get-ChildItem -Path "${env.BACKUP_DIR}\\*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                Write-Host "중앙화된 백업에서 롤백 실행: \$(\$backupWhl.Name)"
                                & "${env.DEPLOY_PIP_CMD}" install \$backupWhl.FullName --force-reinstall
                            }
                        """
                        bat 'nssm start autodoc_service'
                        throw e
                    }
                }
            }
        }
        
        stage('API Health Check') {
            steps {
                script {
                    // 서비스 시작 대기
                    sleep(time: 15, unit: 'SECONDS')
                    
                    def endpoints = [
                        "${env.HEALTH_CHECK_URL}": "기본 헬스체크",
                        "http://localhost:8001/": "루트 엔드포인트",
                        "http://localhost:8001/templates": "템플릿 목록"
                    ]
                    
                    def allPassed = true
                    
                    endpoints.each { url, description ->
                        def endpointPassed = false
                        
                        for (int i = 0; i < 3; i++) {
                            try {
                                def response = powershell(
                                    script: """
                                        try {
                                            \$result = Invoke-WebRequest -Uri '${url}' -UseBasicParsing -TimeoutSec 10
                                            Write-Output \$result.StatusCode
                                        } catch {
                                            Write-Output "500"
                                        }
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                if (response == "200") {
                                    endpointPassed = true
                                    echo "${description} 검증 성공 (${i+1}번째 시도)"
                                    break
                                } else {
                                    echo "${description} 실패 - HTTP ${response} (${i+1}번째 시도)"
                                }
                            } catch (Exception e) {
                                echo "${description} 오류: ${e.getMessage()} (${i+1}번째 시도)"
                            }
                            
                            if (i < 2) sleep(time: 5, unit: 'SECONDS')
                        }
                        
                        if (!endpointPassed) {
                            echo "경고: ${description} 검증 실패"
                            allPassed = false
                        }
                    }
                    
                    if (!allPassed) {
                        echo "일부 API 엔드포인트 검증 실패 - 수동 확인이 필요합니다"
                    } else {
                        echo "모든 API 엔드포인트 검증 완료"
                    }
                }
            }
        }
        
        stage('Document Generation Test') {
            steps {
                script {
                    // 실제 문서 생성 테스트
                    sleep(time: 5, unit: 'SECONDS')
                    
                    try {
                        // 간단한 Word 문서 생성 테스트
                        def wordTestResult = bat(
                            script: """curl -X POST "http://localhost:8001/create-cm-word-enhanced" ^
                                -H "Content-Type: application/json" ^
                                -d "{\\"change_request\\": {\\"change_id\\": \\"TEST_${BUILD_NUMBER}\\", \\"system\\": \\"테스트\\", \\"title\\": \\"배포 테스트\\", \\"requester\\": \\"Jenkins\\"}}" ^
                                -w "%%{http_code}" -o nul""",
                            returnStdout: true
                        ).trim()
                        
                        if (wordTestResult == "200") {
                            echo "문서 생성 테스트 성공"
                        } else {
                            echo "경고: 문서 생성 테스트 실패 - HTTP ${wordTestResult}"
                        }
                        
                    } catch (Exception e) {
                        echo "문서 생성 테스트 오류: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: "${WORKSPACE}/autodoc_service/dist/*.whl", followSymlinks: false
                echo "Jenkins Workspace에서 빌드된 Wheel 아티팩트 보관 완료"
            }
        }
    }
    
    post {
        success {
            echo "AutoDoc Service 배포 성공"
        }
        failure {
            echo "AutoDoc Service 배포 실패 - 로그를 확인하세요"
        }
        always {
            // Jenkins Workspace 정리
            dir("${WORKSPACE}/autodoc_service") {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                // 테스트로 생성된 문서 정리
                bat 'if exist "documents\\*TEST_*" del /f /q "documents\\*TEST_*"'
                // pytest 캐시 정리
                bat 'if exist ".pytest_cache" rmdir /s /q ".pytest_cache"'
                // 임시 파일 강제 정리
                bat 'for /f "tokens=*" %%i in (\'dir /s /b *.xlsx *.docx 2^>nul\') do del /f /q "%%i" 2>nul || echo "Skipping locked file: %%i"'
            }
            
            // 배포 환경 정리
            dir(env.DEPLOY_PATH) {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                bat 'if exist "documents\\*TEST_*" del /f /q "documents\\*TEST_*"'
            }
        }
    }
}