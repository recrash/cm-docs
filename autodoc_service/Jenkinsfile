// autodoc_service/Jenkinsfile
pipeline {
    agent any
    environment {
        // Jenkins Workspace (빌드/테스트용)
        WORKSPACE_PYTHON_CMD = "${WORKSPACE}\\autodoc_service\\.venv312\\Scripts\\python.exe"
        WORKSPACE_PIP_CMD = "${WORKSPACE}\\autodoc_service\\.venv312\\Scripts\\pip.exe"
        
        // 배포 경로 (운영 서비스용) - 새 폴더 구조 반영
        DEPLOY_PATH = 'C:\\deploys\\apps\\autodoc_service'
        DEPLOY_PYTHON_CMD = "${DEPLOY_PATH}\\.venv312\\Scripts\\python.exe"
        DEPLOY_PIP_CMD = "${DEPLOY_PATH}\\.venv312\\Scripts\\pip.exe"
        
        // 환경변수 기반 데이터 경로 (커밋 f57efef)
        AUTODOC_DATA_PATH = 'C:\\deploys\\data\\autodoc_service'
        
        // 기타 설정
        HEALTH_CHECK_URL = 'http://localhost:8001/health'
        BACKUP_DIR = 'C:\\deploys\\backup\\apps\\autodoc_service'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "소스코드 체크아웃 완료"
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    script {
                        echo "Jenkins Workspace에서 테스트 환경 구축"
                        
                        // Python 3.12 가상환경 생성
                        bat '"%LOCALAPPDATA%\\Programs\\Python\\Launcher\\py.exe" -3.12 -m venv .venv312'
                        
                        // Python 버전 확인
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' --version\""
                        
                        // 의존성 설치 (Windows pip 업그레이드 이슈 해결)
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pip install --upgrade pip\""
                        bat "powershell -Command \"& '${env.WORKSPACE_PIP_CMD}' install -r requirements.txt\""
                        
                        // 핵심 의존성 검증 (따옴표 이스케이프 문제 해결)
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -c \\\"from docx import Document; import openpyxl; import pytest; print('Dependencies verified successfully')\\\"\""
                        
                        echo "Jenkins Workspace 테스트 환경 구축 완료"
                    }
                }
            }
        }
        
        stage('Template Validation') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    script {
                        // 필수 템플릿 파일 존재 확인
                        def requiredTemplates = ['template.docx', 'template.xlsx', 'template_list.xlsx']
                        
                        requiredTemplates.each { templateFile ->
                            def exists = bat(
                                script: "if exist \"templates\\${templateFile}\" echo found",
                                returnStdout: true
                            ).contains('found')
                            
                            if (!exists) {
                                error("필수 템플릿 파일이 없습니다: templates/${templateFile}")
                            }
                        }
                        
                        // 템플릿 무결성 검사 (Jenkins Workspace에서 실행)
                        bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_templates_present.py -v\""
                        echo "템플릿 검증 완료"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // 전체 테스트 실행 (Windows 콘솔 인코딩 및 파일 핸들 문제 해결)
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/ -v -x --tb=short --disable-warnings\""
                    
                    // 특별히 중요한 문서 생성 테스트 개별 실행
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_builder_word_label.py -v\""
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_builder_excel_test.py -v\""
                    
                    echo "AutoDoc Service 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // FastAPI 통합 테스트 (Jenkins Workspace에서 실행)
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_fastapi_integration.py -v\""
                    
                    // 로깅 시스템 테스트
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m pytest app/tests/test_logging_system.py -v\""
                    
                    echo "통합 테스트 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Create Backup') {
            steps {
                script {
                    // 백업 디렉토리 생성
                    bat "if not exist \"${env.BACKUP_DIR}\" mkdir \"${env.BACKUP_DIR}\""
                    
                    // 환경변수 기반 데이터 경로 생성 (커밋 f57efef 반영)
                    bat "if not exist \"${env.AUTODOC_DATA_PATH}\" mkdir \"${env.AUTODOC_DATA_PATH}\""
                    
                    // 타겟 폴더의 기존 wheel 파일들과 중요 데이터 백업
                    powershell """
                        if (Test-Path "${env.DEPLOY_PATH}") {
                            \$existingWheels = Get-ChildItem -Path "${env.DEPLOY_PATH}" -Filter "*.whl" -ErrorAction SilentlyContinue
                            if (\$existingWheels.Count -gt 0) {
                                Write-Host "기존 wheel 파일 백업 중..."
                                foreach (\$wheel in \$existingWheels) {
                                    Copy-Item -Path \$wheel.FullName -Destination "${env.BACKUP_DIR}" -Force
                                    Write-Host "백업 완료: \$(\$wheel.Name)"
                                }
                            } else {
                                Write-Host "백업할 wheel 파일이 없습니다"
                            }
                            
                            # 환경변수 기반 중요 데이터 백업 (templates, documents 등)
                            if (Test-Path "${env.AUTODOC_DATA_PATH}") {
                                Write-Host "환경변수 기반 데이터 디렉토리 백업 중..."
                                if (Test-Path "${env.AUTODOC_DATA_PATH}\\templates") {
                                    Copy-Item -Path "${env.AUTODOC_DATA_PATH}\\templates" -Destination "${env.BACKUP_DIR}\\templates" -Recurse -Force -ErrorAction SilentlyContinue
                                }
                                if (Test-Path "${env.AUTODOC_DATA_PATH}\\documents") {
                                    # 중요 문서만 백업 (테스트 제외)
                                    Get-ChildItem -Path "${env.AUTODOC_DATA_PATH}\\documents" -Exclude "*TEST_*" | Copy-Item -Destination "${env.BACKUP_DIR}\\documents" -Recurse -Force -ErrorAction SilentlyContinue
                                }
                            }
                        } else {
                            Write-Host "배포 경로가 존재하지 않습니다: ${env.DEPLOY_PATH}"
                            New-Item -Path "${env.DEPLOY_PATH}" -ItemType Directory -Force
                        }
                    """
                    echo "기존 wheel 파일 백업 완료"
                }
            }
        }
        
        stage('Build') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    // Jenkins Workspace에서 wheel 빌드
                    bat "powershell -Command \"& '${env.WORKSPACE_PYTHON_CMD}' -m build\""
                    
                    // 빌드 결과 검증
                    script {
                        def whlExists = bat(
                            script: 'if exist "dist\\autodoc_service-*.whl" echo found',
                            returnStdout: true
                        ).contains('found')
                        
                        if (!whlExists) {
                            error("빌드 실패: wheel 파일이 생성되지 않았습니다")
                        }
                    }
                    
                    echo "Wheel 빌드 완료 (Jenkins Workspace)"
                }
            }
        }
        
        stage('Download Wheels for Offline') {
            steps {
                dir("${WORKSPACE}/autodoc_service") {
                    script {
                        echo "폐쇄망 환경 대비 휠 번들 다운로드 (스마트 캐싱 적용)"
                        
                        // 휠 다운로드 디렉토리 생성
                        bat 'if not exist ".pip-wheelhouse" mkdir ".pip-wheelhouse"'
                        
                        // requirements.txt 변경 감지를 위한 해시 계산
                        def currentHash = powershell(
                            script: 'Get-FileHash requirements.txt -Algorithm MD5 | Select-Object -ExpandProperty Hash',
                            returnStdout: true
                        ).trim()
                        
                        def cacheFile = ".pip-wheelhouse/.requirements-hash"
                        def cachedHash = ""
                        
                        // 기존 캐시 해시 확인
                        if (fileExists(cacheFile)) {
                            cachedHash = readFile(cacheFile).trim()
                        }
                        
                        // 의존성 변경 여부 확인
                        if (currentHash == cachedHash) {
                            echo "의존성 변경 없음 - 기존 휠 캐시 재사용 (빌드 속도 최적화)"
                            
                            // 캐시된 휠 파일 개수 확인
                            def wheelCount = bat(
                                script: 'dir /b ".pip-wheelhouse\\*.whl" 2>nul | find /c ".whl" || echo 0',
                                returnStdout: true
                            ).trim()
                            
                            if (wheelCount.toInteger() > 0) {
                                echo "캐시된 휠 파일 ${wheelCount}개 발견 - 다운로드 스킵"
                            } else {
                                echo "캐시 파일이 없어 전체 다운로드 실행"
                                bat "powershell -Command \"& '${env.WORKSPACE_PIP_CMD}' download -r requirements.txt -d .pip-wheelhouse --prefer-binary\""
                            }
                        } else {
                            echo "의존성 변경 감지 - 새로운 휠 번들 다운로드"
                            
                            // 기존 휠 파일 정리
                            bat 'if exist ".pip-wheelhouse\\*.whl" del /f /q ".pip-wheelhouse\\*.whl"'
                            
                            // 모든 의존성 휠 다운로드 (폐쇄망 대비, autodoc_service는 제약조건 파일 없음)
                            bat "powershell -Command \"& '${env.WORKSPACE_PIP_CMD}' download -r requirements.txt -d .pip-wheelhouse --prefer-binary\""
                            
                            // 새 해시 저장
                            writeFile file: cacheFile, text: currentHash
                        }
                        
                        // 다운로드된 휠 목록 확인
                        bat 'dir /b ".pip-wheelhouse\\*.whl" | find /c ".whl"'
                        
                        echo "오프라인 설치용 휠 번들 준비 완료 (캐싱 최적화 적용)"
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    try {
                        // 서비스 무조건 중지
                        bat 'nssm stop autodoc_service || echo "이미 중지됨"'
                        echo "AutoDoc Service 중지 완료"
                        
                        // 10초 대기 (사용자 요구사항)
                        sleep(time: 10, unit: 'SECONDS')
                        
                        // 1단계: Jenkins Workspace에서 빌드된 wheel을 타겟 폴더로 복사
                        powershell """
                            \$latestWhl = Get-ChildItem -Path "${WORKSPACE}\\autodoc_service\\dist\\autodoc_service-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$latestWhl) {
                                Write-Host "새 wheel 파일 복사: \$(\$latestWhl.Name)"
                                Copy-Item -Path \$latestWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force
                                Write-Host "복사 완료: ${env.DEPLOY_PATH}\\\$(\$latestWhl.Name)"
                            } else {
                                throw "빌드된 wheel 파일을 찾을 수 없습니다"
                            }
                        """
                        
                        // 2단계: 타겟 폴더의 wheel 파일로 설치
                        powershell """
                            \$deployWhl = Get-ChildItem -Path "${env.DEPLOY_PATH}\\autodoc_service-*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                            if (\$deployWhl) {
                                Write-Host "타겟 폴더에서 설치: \$(\$deployWhl.Name)"
                                & "${env.DEPLOY_PIP_CMD}" install \$deployWhl.FullName --force-reinstall
                                Write-Host "설치 완료"
                            } else {
                                throw "타겟 폴더에 wheel 파일이 없습니다"
                            }
                        """
                        
                        // 서비스 시작
                        bat 'nssm start autodoc_service'
                        echo "AutoDoc Service 시작 완료"
                        
                    } catch (Exception e) {
                        echo "배포 실패: ${e.getMessage()}"
                        // 백업에서 롤백 시도 - 서비스 무조건 중지
                        bat 'nssm stop autodoc_service || echo "이미 중지됨"'
                        powershell """
                            if (Test-Path "${env.BACKUP_DIR}\\*.whl") {
                                \$backupWhl = Get-ChildItem -Path "${env.BACKUP_DIR}\\*.whl" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                                Write-Host "백업에서 롤백 실행: \$(\$backupWhl.Name)"
                                # 백업을 타겟 폴더로 복사
                                Copy-Item -Path \$backupWhl.FullName -Destination "${env.DEPLOY_PATH}" -Force
                                # 타겟 폴더에서 설치
                                & "${env.DEPLOY_PIP_CMD}" install "${env.DEPLOY_PATH}\\\$(\$backupWhl.Name)" --force-reinstall
                            }
                        """
                        bat 'nssm start autodoc_service'
                        throw e
                    }
                }
            }
        }
        
        stage('API Health Check') {
            steps {
                script {
                    // 서비스 시작 대기
                    sleep(time: 15, unit: 'SECONDS')
                    
                    def endpoints = [
                        "${env.HEALTH_CHECK_URL}": "기본 헬스체크",
                        "http://localhost:8001/": "루트 엔드포인트",
                        "http://localhost:8001/templates": "템플릿 목록"
                    ]
                    
                    def allPassed = true
                    
                    endpoints.each { url, description ->
                        def endpointPassed = false
                        
                        for (int i = 0; i < 3; i++) {
                            try {
                                def response = powershell(
                                    script: """
                                        try {
                                            \$result = Invoke-WebRequest -Uri '${url}' -UseBasicParsing -TimeoutSec 10
                                            Write-Output \$result.StatusCode
                                        } catch {
                                            Write-Output "500"
                                        }
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                if (response == "200") {
                                    endpointPassed = true
                                    echo "${description} 검증 성공 (${i+1}번째 시도)"
                                    break
                                } else {
                                    echo "${description} 실패 - HTTP ${response} (${i+1}번째 시도)"
                                }
                            } catch (Exception e) {
                                echo "${description} 오류: ${e.getMessage()} (${i+1}번째 시도)"
                            }
                            
                            if (i < 2) sleep(time: 5, unit: 'SECONDS')
                        }
                        
                        if (!endpointPassed) {
                            echo "경고: ${description} 검증 실패"
                            allPassed = false
                        }
                    }
                    
                    if (!allPassed) {
                        echo "일부 API 엔드포인트 검증 실패 - 수동 확인이 필요합니다"
                    } else {
                        echo "모든 API 엔드포인트 검증 완료"
                    }
                }
            }
        }
        
        stage('Document Generation Test') {
            steps {
                script {
                    // 실제 문서 생성 테스트
                    sleep(time: 5, unit: 'SECONDS')
                    
                    try {
                        // 간단한 Word 문서 생성 테스트
                        def wordTestResult = bat(
                            script: """curl -X POST "http://localhost:8001/create-cm-word-enhanced" ^
                                -H "Content-Type: application/json" ^
                                -d "{\\"change_request\\": {\\"change_id\\": \\"TEST_${BUILD_NUMBER}\\", \\"system\\": \\"테스트\\", \\"title\\": \\"배포 테스트\\", \\"requester\\": \\"Jenkins\\"}}" ^
                                -w "%%{http_code}" -o nul""",
                            returnStdout: true
                        ).trim()
                        
                        if (wordTestResult == "200") {
                            echo "문서 생성 테스트 성공"
                        } else {
                            echo "경고: 문서 생성 테스트 실패 - HTTP ${wordTestResult}"
                        }
                        
                    } catch (Exception e) {
                        echo "문서 생성 테스트 오류: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Archive Artifact') {
            steps {
                // 빌드된 휠과 다운로드된 휠 번들 모두 보관
                archiveArtifacts artifacts: "autodoc_service/dist/*.whl, autodoc_service/.pip-wheelhouse/*.whl", followSymlinks: false
                echo "Jenkins Workspace에서 빌드된 Wheel 아티팩트 및 의존성 휠 번들 보관 완료"
                
                // 폐쇄망 환경 오프라인 설치 가이드
                echo """
                =========================================
                폐쇄망 환경 오프라인 설치 가이드:
                
                1. 아티팩트 다운로드 후 폐쇄망 서버로 전송
                2. 환경변수 설정: set AUTODOC_DATA_PATH=C:\\deploys\\data\\autodoc_service
                3. 가상환경 생성: py -3.12 -m venv .venv312
                4. 가상환경 활성화: .venv312\\Scripts\\activate
                5. 오프라인 설치: pip install --no-index --find-links="./.pip-wheelhouse" autodoc_service-*.whl
                
                주의: 
                - Python 3.12 환경에서 문서 생성 안정성을 보장합니다.
                - AUTODOC_DATA_PATH 환경변수로 데이터 경로를 설정하세요.
                - 환경변수 미설정시 기본값: autodoc_service/data/
                =========================================
                """
            }
        }
    }
    
    post {
        success {
            echo "AutoDoc Service 배포 성공"
        }
        failure {
            echo "AutoDoc Service 배포 실패 - 로그를 확인하세요"
        }
        always {
            // Jenkins Workspace 정리
            dir("${WORKSPACE}/autodoc_service") {
                bat 'if exist "*.tmp" del /f /q *.tmp'
                // 테스트로 생성된 문서 정리 (환경변수 기반 경로 고려)
                bat 'if exist "data\\documents\\*TEST_*" del /f /q "data\\documents\\*TEST_*"'
                bat 'if exist "documents\\*TEST_*" del /f /q "documents\\*TEST_*"'  // 기존 경로 호환성
                // pytest 캐시 정리
                bat 'if exist ".pytest_cache" rmdir /s /q ".pytest_cache"'
                // 임시 파일 강제 정리
                bat 'for /f "tokens=*" %%i in (\'dir /s /b *.xlsx *.docx 2^>nul\') do del /f /q "%%i" 2>nul || echo "Skipping locked file: %%i"'
            }
            
            // 배포 환경 정리
            dir(env.DEPLOY_PATH) {
                bat 'if exist "*.tmp" del /f /q *.tmp'
            }
            
            // 환경변수 기반 데이터 경로 정리
            script {
                if (env.AUTODOC_DATA_PATH) {
                    dir(env.AUTODOC_DATA_PATH) {
                        bat 'if exist "documents\\*TEST_*" del /f /q "documents\\*TEST_*"'
                        bat 'if exist "logs\\*TEST_*" del /f /q "logs\\*TEST_*"'
                    }
                }
            }
        }
    }
}